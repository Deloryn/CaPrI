// <auto-generated />
using System;
using Capri.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capri.Database.Migrations
{
    [DbContext(typeof(CapriDbContext))]
    [Migration("20190911201315_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = new Guid("cf755c9e-1fa8-431b-a843-685515b6492f"), ConcurrencyStamp = "c82007b2-7f65-4b7c-ad87-7cca7d7c3733", Name = "admin", NormalizedName = "admin" },
                        new { Id = new Guid("9530cb95-ff5b-4a7d-933e-311bf7df39b3"), ConcurrencyStamp = "5343fce2-0be0-4634-9ef8-2fc3e364961e", Name = "dean", NormalizedName = "dean" },
                        new { Id = new Guid("6fd2aed2-7506-46e7-af52-aff29de5c7ae"), ConcurrencyStamp = "5f86f12d-a606-464b-bba6-b9f5d954f8b1", Name = "student", NormalizedName = "student" },
                        new { Id = new Guid("cde3233f-3d70-41c9-bd65-ae52f2965c26"), ConcurrencyStamp = "bac1cdc5-b237-4773-a77f-4fc903a39e60", Name = "promoter", NormalizedName = "promoter" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { Id = new Guid("e0588665-ae98-4e76-9f46-a69547dcd60c"), RoleId = new Guid("cf755c9e-1fa8-431b-a843-685515b6492f"), UserId = new Guid("d1eb3bc0-f8d5-43cf-97be-a65ca0eac532") },
                        new { Id = new Guid("cd9a3ba2-f923-422c-8090-388b6998d2cb"), RoleId = new Guid("9530cb95-ff5b-4a7d-933e-311bf7df39b3"), UserId = new Guid("15648e5b-23f0-4e29-a296-fe8f39e6da63") },
                        new { Id = new Guid("ff8c5df2-8e89-47ac-a309-702d622ac4b2"), RoleId = new Guid("9530cb95-ff5b-4a7d-933e-311bf7df39b3"), UserId = new Guid("26d85022-6548-4132-bbd6-1dd7d3ac5b14") },
                        new { Id = new Guid("f8209afa-0447-4984-be3f-115e9fa3361d"), RoleId = new Guid("6fd2aed2-7506-46e7-af52-aff29de5c7ae"), UserId = new Guid("21620ed2-e276-4335-bb21-06a725d3f48e") },
                        new { Id = new Guid("8e76536d-aa12-45de-b92b-b304bcb9cc37"), RoleId = new Guid("6fd2aed2-7506-46e7-af52-aff29de5c7ae"), UserId = new Guid("3b8b57da-e120-44b5-a419-2323fe327e46") },
                        new { Id = new Guid("3bbd1c67-a4d2-44b6-866f-a156c837d355"), RoleId = new Guid("6fd2aed2-7506-46e7-af52-aff29de5c7ae"), UserId = new Guid("0cb455d8-e44e-4e83-bab6-6c396eaa4880") },
                        new { Id = new Guid("ebd42969-552a-4693-8404-0911ab20088c"), RoleId = new Guid("6fd2aed2-7506-46e7-af52-aff29de5c7ae"), UserId = new Guid("a7fa3426-c6a8-428d-810b-40ed0f7c831c") },
                        new { Id = new Guid("f8a89372-b381-4f6d-aa2a-9ba9f6ba7b9f"), RoleId = new Guid("6fd2aed2-7506-46e7-af52-aff29de5c7ae"), UserId = new Guid("84b47ba5-c432-4ce4-a059-9158fca19aaf") },
                        new { Id = new Guid("df549e68-7804-4ca2-a57a-42ba1d1dee43"), RoleId = new Guid("6fd2aed2-7506-46e7-af52-aff29de5c7ae"), UserId = new Guid("ee4a511c-bc5f-47d1-8089-6643b3386206") },
                        new { Id = new Guid("f0ee38dd-9008-46a0-9083-b76d02df6636"), RoleId = new Guid("6fd2aed2-7506-46e7-af52-aff29de5c7ae"), UserId = new Guid("cc9b564d-31f7-4dc3-a5d7-5774deb557e9") },
                        new { Id = new Guid("83fdc4cc-ce2e-422d-b99b-d30210cb6eef"), RoleId = new Guid("6fd2aed2-7506-46e7-af52-aff29de5c7ae"), UserId = new Guid("99296901-fe1f-47e0-8743-f244069a1a1a") },
                        new { Id = new Guid("30d199c6-8875-4a4d-98e7-a2eb87fa7082"), RoleId = new Guid("cde3233f-3d70-41c9-bd65-ae52f2965c26"), UserId = new Guid("6e94fbe0-0be4-44cc-87d4-bc18c644dd52") },
                        new { Id = new Guid("b89c1c14-db06-484a-a52f-ff8faaf6cbaa"), RoleId = new Guid("cde3233f-3d70-41c9-bd65-ae52f2965c26"), UserId = new Guid("27cf0cdb-f3e8-40ff-948a-a942907c02b9") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<Guid>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.HasData(
                        new { Id = new Guid("d1eb3bc0-f8d5-43cf-97be-a65ca0eac532"), AccessFailedCount = 0, ConcurrencyStamp = "75407574-1792-469c-938d-7f04d893385a", Email = "admin1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "admin1@gmail.com", NormalizedUserName = "admin1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEPuv5d7y3W4wQWr06UTvzyfG7oP0ep2/C9o2X+V978waDNspzCyFxOjj+gELVL3HYA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "admin1@gmail.com" },
                        new { Id = new Guid("15648e5b-23f0-4e29-a296-fe8f39e6da63"), AccessFailedCount = 0, ConcurrencyStamp = "df5efa2b-6358-4f6e-a815-88d73f42a38e", Email = "dean1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean1@gmail.com", NormalizedUserName = "dean1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEPQ2Jsriy1q+JC9uzDHDfkx11d5iEC89I01EU9VGKOiEA8M36qcyFq6vVehNB9g+QQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean1@gmail.com" },
                        new { Id = new Guid("26d85022-6548-4132-bbd6-1dd7d3ac5b14"), AccessFailedCount = 0, ConcurrencyStamp = "3f75e517-ec31-467a-8df3-5f74706f13e5", Email = "dean2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean2@gmail.com", NormalizedUserName = "dean2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEPai47qT19usidodFtunCJGMVNwuwWYX9F+gu7CKM7yEgCq9TfMcUssdf+wZxz+CGQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean2@gmail.com" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<Guid?>("PromoterId");

                    b.Property<int>("Status");

                    b.Property<string>("Topic")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PromoterId");

                    b.ToTable("Proposal");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Proposal");
                });

            modelBuilder.Entity("Capri.Database.Entities.DeanEmployee", b =>
                {
                    b.HasBaseType("Capri.Database.Entities.Identity.User");


                    b.ToTable("DeanEmployee");

                    b.HasDiscriminator().HasValue("DeanEmployee");
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.HasBaseType("Capri.Database.Entities.Identity.User");

                    b.Property<bool>("CanSubmitBachelorProposals");

                    b.ToTable("Promoter");

                    b.HasDiscriminator().HasValue("Promoter");

                    b.HasData(
                        new { Id = new Guid("6e94fbe0-0be4-44cc-87d4-bc18c644dd52"), AccessFailedCount = 0, ConcurrencyStamp = "3c105a64-6d61-4605-81fa-dee49517e232", Email = "promoter1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter1@gmail.com", NormalizedUserName = "promoter1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAECblSmDidQr5hzW9KxMJz0aZWSyDKQPEKjjZDmd7ovQxuZg2kQ0scB/7XS3XEmUzqw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter1@gmail.com", CanSubmitBachelorProposals = true },
                        new { Id = new Guid("27cf0cdb-f3e8-40ff-948a-a942907c02b9"), AccessFailedCount = 0, ConcurrencyStamp = "d5d2dcad-c5a3-4cdc-886c-82d42686ccd0", Email = "promoter2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter2@gmail.com", NormalizedUserName = "promoter2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEJew+7umuQ0TiQ2Zsh7W35j5Q+62/IlGOTZ7qJ+NCzeg4oNKiKCWcXtSDVwfYhhhDw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter2@gmail.com", CanSubmitBachelorProposals = true }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.HasBaseType("Capri.Database.Entities.Identity.User");

                    b.Property<Guid?>("ProposalId");

                    b.HasIndex("ProposalId");

                    b.ToTable("Student");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new { Id = new Guid("21620ed2-e276-4335-bb21-06a725d3f48e"), AccessFailedCount = 0, ConcurrencyStamp = "5e18ed73-d309-47e7-9584-791592b9019b", Email = "student1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student1@gmail.com", NormalizedUserName = "student1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEKByNY5G1pGEd+oqspTKFNobPsMQPdCRnvTvw3vCRPikBUhZvKfyVuYu9lfzvRa4yw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student1@gmail.com" },
                        new { Id = new Guid("3b8b57da-e120-44b5-a419-2323fe327e46"), AccessFailedCount = 0, ConcurrencyStamp = "2df5eca0-9b59-40f5-ac6e-5f84e31c20e2", Email = "student2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student2@gmail.com", NormalizedUserName = "student2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEOKsjd7ERhqAUmRAibeDvTiAUOb9IufLQLRQTAhJRSl5CyCL0CQaSO2oI+ElNpXVMQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student2@gmail.com" },
                        new { Id = new Guid("0cb455d8-e44e-4e83-bab6-6c396eaa4880"), AccessFailedCount = 0, ConcurrencyStamp = "9394271a-4ebf-4fc4-a21a-ad16de245081", Email = "student3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student3@gmail.com", NormalizedUserName = "student3@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAELON3X++Uloh2SrL11R8aVPuXFs/GAB8yEiOjyh/lqEO9I52rMZdZHD83+88+LxwBg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student3@gmail.com" },
                        new { Id = new Guid("a7fa3426-c6a8-428d-810b-40ed0f7c831c"), AccessFailedCount = 0, ConcurrencyStamp = "3ded807a-9282-4d9b-8e47-fb8ed938ecdf", Email = "student4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student4@gmail.com", NormalizedUserName = "student4@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEInbYVlFkBSAd0rFLRhEx5hz8wm0VuxoCyK0w1s8pdPgo6ouKQnUSwZciRlWxU1MEw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student4@gmail.com" },
                        new { Id = new Guid("84b47ba5-c432-4ce4-a059-9158fca19aaf"), AccessFailedCount = 0, ConcurrencyStamp = "39e99e18-f2a5-49b4-a652-49bbc24675ef", Email = "student5@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student5@gmail.com", NormalizedUserName = "student5@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEHyaeD0f1KaRFMZt+3lrY5bUHbLWsnBmeuvBmfar4z02EmZCnYPE/OBLbWucKgWkig==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student5@gmail.com" },
                        new { Id = new Guid("ee4a511c-bc5f-47d1-8089-6643b3386206"), AccessFailedCount = 0, ConcurrencyStamp = "b2603169-9acd-44d1-8b4f-6f68c157b09d", Email = "student6@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student6@gmail.com", NormalizedUserName = "student6@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEPA0LsWk3ox8lepkLZaNWLcDz8FYfPocmc8UVuTg13jO1+u7jPZiR4tUbRLgpMk8Bg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student6@gmail.com" },
                        new { Id = new Guid("cc9b564d-31f7-4dc3-a5d7-5774deb557e9"), AccessFailedCount = 0, ConcurrencyStamp = "d1a4fe02-2d31-49f0-b1a4-0faa7c6bb62c", Email = "student7@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student7@gmail.com", NormalizedUserName = "student7@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEOqYBLygshZ3Yr1BluJVjvNe7DXBn5V/xfP7Y41cjjS83wMVWe8CKkI9UWTGYEr4wQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student7@gmail.com" },
                        new { Id = new Guid("99296901-fe1f-47e0-8743-f244069a1a1a"), AccessFailedCount = 0, ConcurrencyStamp = "24fb6d16-42d5-4460-b136-41260258c4b2", Email = "student8@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student8@gmail.com", NormalizedUserName = "student8@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAELAQYHqeG5ukpyw81V4zZrGIlLrVCfSm5EkXdKwqRe15IxlzYMoGYDxIIkw6xd4ZCg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student8@gmail.com" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.BachelorProposal", b =>
                {
                    b.HasBaseType("Capri.Database.Entities.Proposal");


                    b.ToTable("BachelorProposal");

                    b.HasDiscriminator().HasValue("BachelorProposal");
                });

            modelBuilder.Entity("Capri.Database.Entities.MasterProposal", b =>
                {
                    b.HasBaseType("Capri.Database.Entities.Proposal");


                    b.ToTable("MasterProposal");

                    b.HasDiscriminator().HasValue("MasterProposal");
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.HasOne("Capri.Database.Entities.Promoter")
                        .WithMany("Proposals")
                        .HasForeignKey("PromoterId");
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.HasOne("Capri.Database.Entities.Proposal")
                        .WithMany("Students")
                        .HasForeignKey("ProposalId");
                });
#pragma warning restore 612, 618
        }
    }
}

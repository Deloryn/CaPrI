// <auto-generated />
using System;
using Capri.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capri.Database.Migrations
{
    [DbContext(typeof(CapriDbContext))]
    [Migration("20191212121519_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = new Guid("d365e494-ece6-4800-a465-3e08e5e28804"), ConcurrencyStamp = "ae4f1d2d-ae4a-4ba4-baa0-5fb4ce306f8a", Name = "admin", NormalizedName = "admin" },
                        new { Id = new Guid("d077fd49-f515-4546-8f48-af21b4994064"), ConcurrencyStamp = "7d5811cf-5777-4ba7-a1fa-6df61801d887", Name = "dean", NormalizedName = "dean" },
                        new { Id = new Guid("e5a38120-5ef8-4909-98cd-7809bb50f0cc"), ConcurrencyStamp = "1cefb333-7913-4af7-9d66-7268900a40c2", Name = "student", NormalizedName = "student" },
                        new { Id = new Guid("fe4e4f38-27c2-424d-8d3f-5b389d1aba3a"), ConcurrencyStamp = "f4149815-a7ee-4470-bc06-d5c82e4e89c4", Name = "promoter", NormalizedName = "promoter" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { Id = new Guid("acba1c26-b762-4147-97c5-e63508cff76c"), RoleId = new Guid("d365e494-ece6-4800-a465-3e08e5e28804"), UserId = new Guid("9b9fc161-6826-41da-a853-9dabac54c874") },
                        new { Id = new Guid("8b200460-8330-4f3e-bf65-f2d8afa5919c"), RoleId = new Guid("d077fd49-f515-4546-8f48-af21b4994064"), UserId = new Guid("194a6db4-0889-4b19-b6ab-3e751a882fd8") },
                        new { Id = new Guid("151b6bfd-3617-47e0-99b1-c1d18357d383"), RoleId = new Guid("d077fd49-f515-4546-8f48-af21b4994064"), UserId = new Guid("c278c323-0483-48a6-acd2-d7efc9703efc") },
                        new { Id = new Guid("6888a8d3-fe6e-48f3-b8a2-eecd8286cb9d"), RoleId = new Guid("e5a38120-5ef8-4909-98cd-7809bb50f0cc"), UserId = new Guid("efdd998c-f24e-4835-aa9c-776c5b2206e7") },
                        new { Id = new Guid("db0d915b-3446-47f9-b2bc-cc3910f6d36a"), RoleId = new Guid("e5a38120-5ef8-4909-98cd-7809bb50f0cc"), UserId = new Guid("776909ab-347d-4d47-a7f7-0fdd85635ad4") },
                        new { Id = new Guid("43df8603-05e4-45f3-b3e5-d99026f56218"), RoleId = new Guid("e5a38120-5ef8-4909-98cd-7809bb50f0cc"), UserId = new Guid("00e20a92-7fb9-42a4-8e60-5f60b775083f") },
                        new { Id = new Guid("3d865404-8415-44ba-9a57-6c8dc2464cba"), RoleId = new Guid("e5a38120-5ef8-4909-98cd-7809bb50f0cc"), UserId = new Guid("1d819e4a-462e-43f2-bbce-f926183c3515") },
                        new { Id = new Guid("c4d33a3d-be94-435e-b8c9-7ba882de1f80"), RoleId = new Guid("e5a38120-5ef8-4909-98cd-7809bb50f0cc"), UserId = new Guid("0422a146-1a1c-4261-8c8b-0fe88dc969f1") },
                        new { Id = new Guid("d0852eee-87b3-4bd6-b0da-fa624d9dabb5"), RoleId = new Guid("e5a38120-5ef8-4909-98cd-7809bb50f0cc"), UserId = new Guid("4a8e4fa6-1dde-4c71-ae9f-05f8ea16b9fb") },
                        new { Id = new Guid("4b37d2b6-ed42-44d9-ad11-fe4d9d4b5799"), RoleId = new Guid("e5a38120-5ef8-4909-98cd-7809bb50f0cc"), UserId = new Guid("bf63b4fc-59b2-4d94-ae15-d6d4ac46a8e3") },
                        new { Id = new Guid("22ac1cee-2bab-4d19-8706-f43a4e801988"), RoleId = new Guid("e5a38120-5ef8-4909-98cd-7809bb50f0cc"), UserId = new Guid("289340a0-0676-4389-865d-2fd7509edd36") },
                        new { Id = new Guid("9d33cf0c-a581-4306-a8a9-5c75c267b666"), RoleId = new Guid("fe4e4f38-27c2-424d-8d3f-5b389d1aba3a"), UserId = new Guid("3d2d4472-d245-461a-89d8-07de0fdc676d") },
                        new { Id = new Guid("62a63d15-c5d6-4b76-a395-5e9d187c8c8c"), RoleId = new Guid("fe4e4f38-27c2-424d-8d3f-5b389d1aba3a"), UserId = new Guid("df037dae-d01e-4c2f-9942-a1790ccbbf52") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<Guid>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = new Guid("9b9fc161-6826-41da-a853-9dabac54c874"), AccessFailedCount = 0, ConcurrencyStamp = "8e66cc28-4ba9-4c93-9971-219228271b77", Email = "admin1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "admin1@gmail.com", NormalizedUserName = "admin1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEEG62dIYLBfZ7xu6XDAwpoY6KTplgFL/HgUw5mojgfhwTmnUrV8OFODLIXjkK5JDGw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "admin1@gmail.com" },
                        new { Id = new Guid("194a6db4-0889-4b19-b6ab-3e751a882fd8"), AccessFailedCount = 0, ConcurrencyStamp = "67687291-c706-4cdb-a892-ea5ce0c9b65b", Email = "dean1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean1@gmail.com", NormalizedUserName = "dean1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEKc9ZnN6uvOqRMn/IYVMuZvfMmZGgAq8Rm4ItSF2eW/rrvLIO1u2wCtPrz8XjA8Q6Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean1@gmail.com" },
                        new { Id = new Guid("c278c323-0483-48a6-acd2-d7efc9703efc"), AccessFailedCount = 0, ConcurrencyStamp = "f0600daf-17a2-4b06-bd03-ce46c0d62164", Email = "dean2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean2@gmail.com", NormalizedUserName = "dean2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEBIlFKXuBmjlQ3idWwPgcFFmdljoWMwzgElCkTNIl1YpiOwis/KsPAssypAiNYtl8Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean2@gmail.com" },
                        new { Id = new Guid("efdd998c-f24e-4835-aa9c-776c5b2206e7"), AccessFailedCount = 0, ConcurrencyStamp = "bc8b6333-fa92-4136-81eb-ababb70565ed", Email = "student1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student1@gmail.com", NormalizedUserName = "student1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAENuImskLziCMTzVb9Gt0HE2c8Y1stR6O18D/rWI2EwfEjg39MOJBjafawKeMQgRFoA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student1@gmail.com" },
                        new { Id = new Guid("776909ab-347d-4d47-a7f7-0fdd85635ad4"), AccessFailedCount = 0, ConcurrencyStamp = "08e6ab46-55e3-4b22-9560-d7c5d7fe54d9", Email = "student2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student2@gmail.com", NormalizedUserName = "student2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEHzGUTq4hZFC8alMzES3SEX2t9MpZp/RvFXSjBSW0HEqpkB2ZKeDICSGzW0w8tqgpg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student2@gmail.com" },
                        new { Id = new Guid("00e20a92-7fb9-42a4-8e60-5f60b775083f"), AccessFailedCount = 0, ConcurrencyStamp = "109ceaab-bc04-4027-8387-ead23e956e3b", Email = "student3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student3@gmail.com", NormalizedUserName = "student3@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEPDako1kL4Z37dW96ifhpIFQ/RrCroIxuZ0PEBP0g1kFAR4jHfduHI61G/F8F/PRoQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student3@gmail.com" },
                        new { Id = new Guid("1d819e4a-462e-43f2-bbce-f926183c3515"), AccessFailedCount = 0, ConcurrencyStamp = "6726f920-b441-41cb-8080-ecb2e10fab02", Email = "student4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student4@gmail.com", NormalizedUserName = "student4@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEKHE7j+7ipCJLL2xbsqEXeCab/zat+ooXhsXJCCM+FzlPRfI9Q5kBparwJuVcqQ/1A==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student4@gmail.com" },
                        new { Id = new Guid("0422a146-1a1c-4261-8c8b-0fe88dc969f1"), AccessFailedCount = 0, ConcurrencyStamp = "a25a1c49-7731-4788-b378-5d5784716ebe", Email = "student5@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student5@gmail.com", NormalizedUserName = "student5@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEODDbfpqhRXzVkDa7BRqgeWOQZrWPT51xfnCBtIrXt1m2mMJS7PTygrqOjOosppy+A==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student5@gmail.com" },
                        new { Id = new Guid("4a8e4fa6-1dde-4c71-ae9f-05f8ea16b9fb"), AccessFailedCount = 0, ConcurrencyStamp = "3ddbfca2-dff8-44a8-af0b-dedd9a11bd6e", Email = "student6@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student6@gmail.com", NormalizedUserName = "student6@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEDCMWzPOTh2MT35amDqRB4npFkK4UQWmw0xmbA0C17zlCkWg2XTcFLmDsWyRDrY3IQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student6@gmail.com" },
                        new { Id = new Guid("bf63b4fc-59b2-4d94-ae15-d6d4ac46a8e3"), AccessFailedCount = 0, ConcurrencyStamp = "3383e2fe-fd58-497d-b390-9697094cffb8", Email = "student7@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student7@gmail.com", NormalizedUserName = "student7@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEBUvKMu9JhJGvByo+0vBDTi+fcojWeg/lxt1S82kk+CC9nXTY4KnGz4vfqS3x3o4Vg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student7@gmail.com" },
                        new { Id = new Guid("289340a0-0676-4389-865d-2fd7509edd36"), AccessFailedCount = 0, ConcurrencyStamp = "19b60ae1-8e59-4006-b69d-b7a214c40573", Email = "student8@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student8@gmail.com", NormalizedUserName = "student8@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEKDZnSW0NiawUp7Fc3ZXPkqjV0OQtm7vPqoCGxj8b7NVMu0XQgy6VYQsR0mvagTnRg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student8@gmail.com" },
                        new { Id = new Guid("3d2d4472-d245-461a-89d8-07de0fdc676d"), AccessFailedCount = 0, ConcurrencyStamp = "693cc644-361b-46cf-9d89-0c8ddf71adb0", Email = "promoter1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter1@gmail.com", NormalizedUserName = "promoter1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEPux4qFLYsWD2AK8J77dw/BmaWbVJ/S7BQAbTAHXVdlRxGQOUoCllxLun+RlTtjXow==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter1@gmail.com" },
                        new { Id = new Guid("df037dae-d01e-4c2f-9942-a1790ccbbf52"), AccessFailedCount = 0, ConcurrencyStamp = "67f88592-e4f5-4f7c-9030-6963acfc1b6a", Email = "promoter2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter2@gmail.com", NormalizedUserName = "promoter2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEBHbu5QUSaLVSG6ZafyF59ZSCq5Yo3mSn99LnjuyCaq7t7XJ8FD4862FbukXXRuTFg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter2@gmail.com" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExpectedNumberOfBachelorProposals");

                    b.Property<int>("ExpectedNumberOfMasterProposals");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Promoters");

                    b.HasData(
                        new { Id = new Guid("7ce9b5c1-290b-4f2d-8005-1bd98645e00d"), ExpectedNumberOfBachelorProposals = 3, ExpectedNumberOfMasterProposals = 4, FirstName = "Jan", LastName = "Kowalski", UserId = new Guid("3d2d4472-d245-461a-89d8-07de0fdc676d") },
                        new { Id = new Guid("510ffa86-84e2-4173-94c8-4b0bbf34e326"), ExpectedNumberOfBachelorProposals = 3, ExpectedNumberOfMasterProposals = 4, FirstName = "Jan", LastName = "Kowalski", UserId = new Guid("df037dae-d01e-4c2f-9942-a1790ccbbf52") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Level");

                    b.Property<int>("Mode");

                    b.Property<Guid>("PromoterId");

                    b.Property<int>("Status");

                    b.Property<string>("Topic")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PromoterId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ProposalId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new { Id = new Guid("8b0d8a7c-8233-42e1-879b-acf5ea4bc78c"), UserId = new Guid("efdd998c-f24e-4835-aa9c-776c5b2206e7") },
                        new { Id = new Guid("5354aa06-1f90-4630-b3d2-8d92186c412c"), UserId = new Guid("776909ab-347d-4d47-a7f7-0fdd85635ad4") },
                        new { Id = new Guid("b2341b28-f647-412c-99e0-5ff0db037a65"), UserId = new Guid("00e20a92-7fb9-42a4-8e60-5f60b775083f") },
                        new { Id = new Guid("2c2831db-f3cd-4d21-8ba2-a05e2449d959"), UserId = new Guid("1d819e4a-462e-43f2-bbce-f926183c3515") },
                        new { Id = new Guid("1793c485-c38a-41f6-8131-a352d6b62265"), UserId = new Guid("0422a146-1a1c-4261-8c8b-0fe88dc969f1") },
                        new { Id = new Guid("ade7ff39-183a-4513-bd42-7aa7b7e856ab"), UserId = new Guid("4a8e4fa6-1dde-4c71-ae9f-05f8ea16b9fb") },
                        new { Id = new Guid("8d9ec519-77f9-4942-b5de-4350acdb1b6b"), UserId = new Guid("bf63b4fc-59b2-4d94-ae15-d6d4ac46a8e3") },
                        new { Id = new Guid("87cad4a9-a374-4719-a0af-d8b7faabd364"), UserId = new Guid("289340a0-0676-4389-865d-2fd7509edd36") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.HasOne("Capri.Database.Entities.Promoter", "Promoter")
                        .WithMany("Proposals")
                        .HasForeignKey("PromoterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.HasOne("Capri.Database.Entities.Proposal")
                        .WithMany("Students")
                        .HasForeignKey("ProposalId");

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

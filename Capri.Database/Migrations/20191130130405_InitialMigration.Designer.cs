// <auto-generated />
using System;
using Capri.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capri.Database.Migrations
{
    [DbContext(typeof(CapriDbContext))]
    [Migration("20191130130405_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = new Guid("e65f3879-1f2b-4763-9a25-194d7fb3638a"), ConcurrencyStamp = "bb5c458c-a750-4ef1-95ae-5a4837a224a3", Name = "admin", NormalizedName = "admin" },
                        new { Id = new Guid("0cb092a1-5c4f-4b8e-ba25-c3d99f50de9b"), ConcurrencyStamp = "9ec2dd60-de30-4bd3-bd68-6d113f99f2e4", Name = "dean", NormalizedName = "dean" },
                        new { Id = new Guid("408bdace-1a83-469d-a4cf-d56a50f049d6"), ConcurrencyStamp = "0882bd75-046e-4698-9c3c-dc5cfdcfa725", Name = "student", NormalizedName = "student" },
                        new { Id = new Guid("b56e04d1-53c5-4267-aec6-976bf8b0e634"), ConcurrencyStamp = "8ba679c3-1cd8-4f66-a6e4-b08fa101f7c9", Name = "promoter", NormalizedName = "promoter" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { Id = new Guid("297439d3-588b-4a4e-b350-11fcb36660b6"), RoleId = new Guid("e65f3879-1f2b-4763-9a25-194d7fb3638a"), UserId = new Guid("90ef2b99-c3a3-486b-8758-4457a6f11b23") },
                        new { Id = new Guid("f7ec4f3d-9ea2-47b4-b8ee-bfb263eadc81"), RoleId = new Guid("0cb092a1-5c4f-4b8e-ba25-c3d99f50de9b"), UserId = new Guid("f6fbb01f-b930-4760-ab8f-aff9cb84d589") },
                        new { Id = new Guid("2ebf76e1-5ba7-412a-9f60-a273147808fb"), RoleId = new Guid("0cb092a1-5c4f-4b8e-ba25-c3d99f50de9b"), UserId = new Guid("2d85d330-f373-42e8-ae7f-c11e308e510b") },
                        new { Id = new Guid("1d38f2ee-a463-4fd0-83b8-564826a917d9"), RoleId = new Guid("408bdace-1a83-469d-a4cf-d56a50f049d6"), UserId = new Guid("c457081f-c65c-4cf8-a0e3-63d1fbf8e2da") },
                        new { Id = new Guid("6808798d-4c4b-416f-bb35-5e68d0a9b9d9"), RoleId = new Guid("408bdace-1a83-469d-a4cf-d56a50f049d6"), UserId = new Guid("b8b1bdbe-c702-469c-a879-7dadd1abb0e5") },
                        new { Id = new Guid("6e360001-132a-4f7c-8409-5d4877607c63"), RoleId = new Guid("408bdace-1a83-469d-a4cf-d56a50f049d6"), UserId = new Guid("b4d0c06e-2733-4dab-81b8-49e2e641c898") },
                        new { Id = new Guid("b1a3e351-dc57-4813-9d28-8e5e957b276b"), RoleId = new Guid("408bdace-1a83-469d-a4cf-d56a50f049d6"), UserId = new Guid("b8a0fca9-398f-4c49-b49d-2bd39c1b22a6") },
                        new { Id = new Guid("aedab341-6df2-4ab8-8bdf-a9fd8dd9a685"), RoleId = new Guid("408bdace-1a83-469d-a4cf-d56a50f049d6"), UserId = new Guid("2a427475-0cdd-40e4-bfc2-2cbcf7e95285") },
                        new { Id = new Guid("b87698e9-fe31-4c49-a40d-1d7afa09743d"), RoleId = new Guid("408bdace-1a83-469d-a4cf-d56a50f049d6"), UserId = new Guid("73c8c86a-d56d-4068-959d-513cf9f1c424") },
                        new { Id = new Guid("a3b30858-0bd8-4a8a-9ae8-a8fdd52ccae9"), RoleId = new Guid("408bdace-1a83-469d-a4cf-d56a50f049d6"), UserId = new Guid("43a425e9-6414-4d98-b680-ce4fede9f2e5") },
                        new { Id = new Guid("5daac56a-c8b1-4977-a234-008740af1161"), RoleId = new Guid("408bdace-1a83-469d-a4cf-d56a50f049d6"), UserId = new Guid("8e68c684-5cc2-4182-a57f-f2d375f23428") },
                        new { Id = new Guid("e14e2d2a-9999-46d3-9eb3-752ba1fd6aef"), RoleId = new Guid("b56e04d1-53c5-4267-aec6-976bf8b0e634"), UserId = new Guid("9084eace-f922-4535-8a61-f5a35e4961cf") },
                        new { Id = new Guid("d265ec44-d0c4-4c0d-a6ae-87ab42768f2c"), RoleId = new Guid("b56e04d1-53c5-4267-aec6-976bf8b0e634"), UserId = new Guid("2c53d2da-3768-474d-96bd-5679e9a0d7e8") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<Guid>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = new Guid("90ef2b99-c3a3-486b-8758-4457a6f11b23"), AccessFailedCount = 0, ConcurrencyStamp = "bdc90121-6b92-4012-84fd-136e9f97bc1b", Email = "admin1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "admin1@gmail.com", NormalizedUserName = "admin1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEHRuZHPPD2g/pX3zoSbekqHV9HA6dgSUACV5PbD11aKcnPhcRQrbaOuOlfSmuxzPdg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "admin1@gmail.com" },
                        new { Id = new Guid("f6fbb01f-b930-4760-ab8f-aff9cb84d589"), AccessFailedCount = 0, ConcurrencyStamp = "e3459626-3e50-45fe-ba9d-e32a400c03fa", Email = "dean1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean1@gmail.com", NormalizedUserName = "dean1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEFllNiAdaciszlIIRbzshegxSu8x3VvmIlGxfx/NBbmSMwvDQfqOUDegZwp74wBaFA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean1@gmail.com" },
                        new { Id = new Guid("2d85d330-f373-42e8-ae7f-c11e308e510b"), AccessFailedCount = 0, ConcurrencyStamp = "e73a964c-e8c5-4f12-9e5a-a459e468faa8", Email = "dean2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean2@gmail.com", NormalizedUserName = "dean2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEIQ1TbBD9IGAY647XG0pQXPZClFgplfVNNyyRuOO/86KDUZ6Lp0K8FHHWCikW2ZSiA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean2@gmail.com" },
                        new { Id = new Guid("c457081f-c65c-4cf8-a0e3-63d1fbf8e2da"), AccessFailedCount = 0, ConcurrencyStamp = "7ac6e6ca-1d5e-419e-8336-02dfd55cb0ec", Email = "student1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student1@gmail.com", NormalizedUserName = "student1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEPUHoiLVvoivlUZk5At2h+g2jWqLE2TMC3WQkV3Prj04QV/QCNOKyH1d8dim6A6wBg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student1@gmail.com" },
                        new { Id = new Guid("b8b1bdbe-c702-469c-a879-7dadd1abb0e5"), AccessFailedCount = 0, ConcurrencyStamp = "fb7ad85b-36e4-4d21-a93e-8cf18952252a", Email = "student2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student2@gmail.com", NormalizedUserName = "student2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAELO9lkGSFeuwIG/nmb6KNZ/qQ6ETHeJ4DE7B9MwXqe+ZlHHGfmGJiSuPfXLR1t10mA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student2@gmail.com" },
                        new { Id = new Guid("b4d0c06e-2733-4dab-81b8-49e2e641c898"), AccessFailedCount = 0, ConcurrencyStamp = "7bb9fa61-fc3c-4daa-9298-fd3099afbc1e", Email = "student3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student3@gmail.com", NormalizedUserName = "student3@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEJCrywqCO0ztykDU5/yJvn0PV5hoh0YCC9S8QLBInsEijQJECe63FJYPbsmCT6pt3Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student3@gmail.com" },
                        new { Id = new Guid("b8a0fca9-398f-4c49-b49d-2bd39c1b22a6"), AccessFailedCount = 0, ConcurrencyStamp = "4c260287-51f3-4e06-b90b-0aa34b232e18", Email = "student4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student4@gmail.com", NormalizedUserName = "student4@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEKINWdGFJs0W8ZpQ++YIc9uUKH7GZsObHkDTck/MbZYUGYUNWWCy3emHgeLNIB29Uw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student4@gmail.com" },
                        new { Id = new Guid("2a427475-0cdd-40e4-bfc2-2cbcf7e95285"), AccessFailedCount = 0, ConcurrencyStamp = "69e32f1a-b5a8-4b6f-8d5c-9edc3282f29c", Email = "student5@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student5@gmail.com", NormalizedUserName = "student5@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEPlIkR6KQSyheTbxS0Vsj3IcKirP0x3hrIHSPn0qZdQA1ZYGTTeWD0vlvb8TGjCB1Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student5@gmail.com" },
                        new { Id = new Guid("73c8c86a-d56d-4068-959d-513cf9f1c424"), AccessFailedCount = 0, ConcurrencyStamp = "d148e1d2-c54d-4c9b-83ff-ef7cc35ec0ee", Email = "student6@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student6@gmail.com", NormalizedUserName = "student6@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEOCCMbuj/OV3kaT1ebh6KUjJSsb3H7h4r7ENpBYqbRR4CRYcdcGL3iPNrRItDy9raw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student6@gmail.com" },
                        new { Id = new Guid("43a425e9-6414-4d98-b680-ce4fede9f2e5"), AccessFailedCount = 0, ConcurrencyStamp = "670eb05a-6faa-4c3f-84c6-dbc5d4af1ef0", Email = "student7@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student7@gmail.com", NormalizedUserName = "student7@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEFidcwIdwYuvif5wb/IT0cp21XZ+CpytEmwHYLDDRVTP/jfTRhqsfnche36wRvkLLA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student7@gmail.com" },
                        new { Id = new Guid("8e68c684-5cc2-4182-a57f-f2d375f23428"), AccessFailedCount = 0, ConcurrencyStamp = "7167c6fe-fbd0-4926-9385-dfda0d6ed85f", Email = "student8@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student8@gmail.com", NormalizedUserName = "student8@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEFjuqB9tdUW9yKmUHwZejCxbMU4ILEoQskJPhGvJ5RFuKdcqgJtczySb/hCT0ZAp2g==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student8@gmail.com" },
                        new { Id = new Guid("9084eace-f922-4535-8a61-f5a35e4961cf"), AccessFailedCount = 0, ConcurrencyStamp = "586b8180-a253-4edc-a555-59c05cf41e6e", Email = "promoter1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter1@gmail.com", NormalizedUserName = "promoter1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAECoy6ngFpNf87YsZzwVd7lf2y81+sBUq5fHM7kftUFNOSbxBPrpvinGf4ye1kHJGcA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter1@gmail.com" },
                        new { Id = new Guid("2c53d2da-3768-474d-96bd-5679e9a0d7e8"), AccessFailedCount = 0, ConcurrencyStamp = "8a323ccc-3bac-470d-a899-d518079fee46", Email = "promoter2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter2@gmail.com", NormalizedUserName = "promoter2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEBineG1YeSN3b7vncWPRGyCBLi+OgduJVGEF2lNIV62zsJaHkoeNL87Y63ELkeRvGw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter2@gmail.com" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExpectedNumberOfBachelorProposals");

                    b.Property<int>("ExpectedNumberOfMasterProposals");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Promoters");

                    b.HasData(
                        new { Id = new Guid("2121dd7d-a183-4bff-9693-1fbf663b7d3f"), ExpectedNumberOfBachelorProposals = 3, ExpectedNumberOfMasterProposals = 4, FirstName = "Jan", LastName = "Kowalski", UserId = new Guid("9084eace-f922-4535-8a61-f5a35e4961cf") },
                        new { Id = new Guid("a0f34749-02e6-451d-8439-04d3da7db1a2"), ExpectedNumberOfBachelorProposals = 3, ExpectedNumberOfMasterProposals = 4, FirstName = "Jan", LastName = "Kowalski", UserId = new Guid("2c53d2da-3768-474d-96bd-5679e9a0d7e8") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Level");

                    b.Property<int>("Mode");

                    b.Property<Guid>("PromoterId");

                    b.Property<Guid?>("PromoterId1");

                    b.Property<int>("Status");

                    b.Property<string>("Topic")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PromoterId");

                    b.HasIndex("PromoterId1");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ProposalId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new { Id = new Guid("d09cb633-a214-46e6-bb31-c95e5eb7bdb0"), UserId = new Guid("c457081f-c65c-4cf8-a0e3-63d1fbf8e2da") },
                        new { Id = new Guid("b3f81ef2-3cf2-46aa-864a-90aba805120a"), UserId = new Guid("b8b1bdbe-c702-469c-a879-7dadd1abb0e5") },
                        new { Id = new Guid("aa3c3d67-1eb2-4408-8b24-1b3573f1d65f"), UserId = new Guid("b4d0c06e-2733-4dab-81b8-49e2e641c898") },
                        new { Id = new Guid("efe953b0-3385-4517-96f4-530623f7e1f1"), UserId = new Guid("b8a0fca9-398f-4c49-b49d-2bd39c1b22a6") },
                        new { Id = new Guid("3e037427-1fb7-4a97-a1bf-bbb4aaa48235"), UserId = new Guid("2a427475-0cdd-40e4-bfc2-2cbcf7e95285") },
                        new { Id = new Guid("7159e7c0-dd04-40be-b742-1a538ad08f0b"), UserId = new Guid("73c8c86a-d56d-4068-959d-513cf9f1c424") },
                        new { Id = new Guid("87a3d54f-bde9-42ac-849f-160fa210a77a"), UserId = new Guid("43a425e9-6414-4d98-b680-ce4fede9f2e5") },
                        new { Id = new Guid("fd962aff-edcc-4af2-82d5-84f823e02865"), UserId = new Guid("8e68c684-5cc2-4182-a57f-f2d375f23428") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.HasOne("Capri.Database.Entities.Promoter", "Promoter")
                        .WithMany()
                        .HasForeignKey("PromoterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Capri.Database.Entities.Promoter")
                        .WithMany("Proposals")
                        .HasForeignKey("PromoterId1");
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.HasOne("Capri.Database.Entities.Proposal")
                        .WithMany("Students")
                        .HasForeignKey("ProposalId");

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

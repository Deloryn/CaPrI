// <auto-generated />
using System;
using Capri.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capri.Database.Migrations
{
    [DbContext(typeof(CapriDbContext))]
    [Migration("20191212123755_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = new Guid("052805d8-cb10-4cb8-b93d-63ac12b858bf"), ConcurrencyStamp = "68ded89d-af2b-48d3-a455-82746d01d7b1", Name = "admin", NormalizedName = "admin" },
                        new { Id = new Guid("8b4ac60f-71e6-4265-aaba-2200e2242a64"), ConcurrencyStamp = "fd545f0f-ae6e-44b4-9619-1ca1e9a8933a", Name = "dean", NormalizedName = "dean" },
                        new { Id = new Guid("94d1f90c-c453-459d-82c8-8da182f406e5"), ConcurrencyStamp = "cf1999fa-1ca7-4597-80da-c48cb4ef3a27", Name = "student", NormalizedName = "student" },
                        new { Id = new Guid("d5698ae4-cde6-4302-a83c-85078e0a42c5"), ConcurrencyStamp = "d4378fa8-63f8-4152-8798-bc840939a7a7", Name = "promoter", NormalizedName = "promoter" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { Id = new Guid("a63d4b29-8f64-4050-ae0b-c51be23b9f81"), RoleId = new Guid("052805d8-cb10-4cb8-b93d-63ac12b858bf"), UserId = new Guid("f2261f23-c60a-4aac-b923-d6c491323a70") },
                        new { Id = new Guid("53f61f01-fae8-4eb0-a567-e4506bc08d16"), RoleId = new Guid("8b4ac60f-71e6-4265-aaba-2200e2242a64"), UserId = new Guid("1bb62633-3157-4d59-8dde-39b7c5dc8b2a") },
                        new { Id = new Guid("ca514399-b0de-4193-ad6b-8f59778f02ec"), RoleId = new Guid("8b4ac60f-71e6-4265-aaba-2200e2242a64"), UserId = new Guid("8df71ba7-cb6f-4ae7-9aa0-d5782dca4c32") },
                        new { Id = new Guid("5ea714cb-c6ed-4fa7-8ad1-323f49e4e798"), RoleId = new Guid("94d1f90c-c453-459d-82c8-8da182f406e5"), UserId = new Guid("5760171d-29af-4dbc-962d-f5deb91d34f0") },
                        new { Id = new Guid("29d9c647-bb4d-4522-8af5-9f861b7d26cb"), RoleId = new Guid("94d1f90c-c453-459d-82c8-8da182f406e5"), UserId = new Guid("de74c9e3-a456-4c5a-8af6-dbac149a47aa") },
                        new { Id = new Guid("767cd0fa-99bd-4872-ae02-2c78cb0b68c7"), RoleId = new Guid("94d1f90c-c453-459d-82c8-8da182f406e5"), UserId = new Guid("30caf02f-ac64-47ec-bf99-151e4d1a7e88") },
                        new { Id = new Guid("b2836b24-ef4d-4a2f-b788-d0fcce25ef22"), RoleId = new Guid("94d1f90c-c453-459d-82c8-8da182f406e5"), UserId = new Guid("711713fb-c525-411a-b6bc-b072e7f50ecc") },
                        new { Id = new Guid("f3f5ab5f-101b-4bd1-9c5c-3b3dd9172f02"), RoleId = new Guid("94d1f90c-c453-459d-82c8-8da182f406e5"), UserId = new Guid("7803567a-77cb-41a7-b7c4-6001ce3ba460") },
                        new { Id = new Guid("b6e967f9-0e50-4f7f-839b-bbe373e6594c"), RoleId = new Guid("94d1f90c-c453-459d-82c8-8da182f406e5"), UserId = new Guid("393f7550-c316-4235-a64e-9a34df3994bf") },
                        new { Id = new Guid("5e223132-ae98-41c8-a671-0be433d94178"), RoleId = new Guid("94d1f90c-c453-459d-82c8-8da182f406e5"), UserId = new Guid("4ea80fdf-b840-47e5-8285-0718d4687bae") },
                        new { Id = new Guid("7af5c3b5-8d8e-48fa-aa09-e1670a705c20"), RoleId = new Guid("94d1f90c-c453-459d-82c8-8da182f406e5"), UserId = new Guid("e7779777-8615-4f78-8ad8-7d2909d5703b") },
                        new { Id = new Guid("3e577a4b-ef57-486a-92fe-df4a62eaab90"), RoleId = new Guid("d5698ae4-cde6-4302-a83c-85078e0a42c5"), UserId = new Guid("ebe1f763-f12b-4d83-a813-c8873c03705f") },
                        new { Id = new Guid("5b3f8a2e-eff6-43b7-83ef-31ad03d39d90"), RoleId = new Guid("d5698ae4-cde6-4302-a83c-85078e0a42c5"), UserId = new Guid("0d2ee102-06a9-4a3b-ab6a-ee954f364598") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<Guid>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = new Guid("f2261f23-c60a-4aac-b923-d6c491323a70"), AccessFailedCount = 0, ConcurrencyStamp = "79b25d66-5a4b-46e7-9d69-097927d744c4", Email = "admin1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "admin1@gmail.com", NormalizedUserName = "admin1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEJTm+ZVKPwdfNaOHUJ6B6pvrJo+m6tB0Sn0tdYF/gTtikiMH1V5kfvsvm+0ObbtFow==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "admin1@gmail.com" },
                        new { Id = new Guid("1bb62633-3157-4d59-8dde-39b7c5dc8b2a"), AccessFailedCount = 0, ConcurrencyStamp = "28374727-e301-4050-a762-f027ebaa2fe0", Email = "dean1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean1@gmail.com", NormalizedUserName = "dean1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEHspuq+CdCW/S58IWA9eBuEzDXIeIBTdqsKYkBDoSbfcUYpRsfgXR4JEqN1JDE9Ujg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean1@gmail.com" },
                        new { Id = new Guid("8df71ba7-cb6f-4ae7-9aa0-d5782dca4c32"), AccessFailedCount = 0, ConcurrencyStamp = "4cd5654d-1a69-4988-96ea-38d2daaf4427", Email = "dean2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean2@gmail.com", NormalizedUserName = "dean2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEBLbGLwvDRz1OcLRKz03Rs+t1ae2ofDxwWWTzIcDiXYvZX0rjKgsmNcrgwTUekFMAA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean2@gmail.com" },
                        new { Id = new Guid("5760171d-29af-4dbc-962d-f5deb91d34f0"), AccessFailedCount = 0, ConcurrencyStamp = "1056aa40-06ab-4c13-a9d6-6e2572eb0c5b", Email = "student1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student1@gmail.com", NormalizedUserName = "student1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEMIi68GOMYn868LqX2MuHGU17YB9w6TCShrJ20QdSJi6GkpHR9xAlRU7d4M15WmSig==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student1@gmail.com" },
                        new { Id = new Guid("de74c9e3-a456-4c5a-8af6-dbac149a47aa"), AccessFailedCount = 0, ConcurrencyStamp = "b9cfd373-2418-410f-9ce1-b5c114871fe9", Email = "student2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student2@gmail.com", NormalizedUserName = "student2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEFaYIlZeYLR6QUFQKZCykH2GXsgA0sov0Lrk3z5hieUuH4J4J6o4mjP4BXH6lnJwfg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student2@gmail.com" },
                        new { Id = new Guid("30caf02f-ac64-47ec-bf99-151e4d1a7e88"), AccessFailedCount = 0, ConcurrencyStamp = "c2067af2-d131-4fcd-a3e3-53fddabbe406", Email = "student3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student3@gmail.com", NormalizedUserName = "student3@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAENfOr/6YpRSjHodMxAaF/Jc2Fc8+ZkotJIS4ZdnF77NogtCBVgTNlIuvHAzvlFQa7g==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student3@gmail.com" },
                        new { Id = new Guid("711713fb-c525-411a-b6bc-b072e7f50ecc"), AccessFailedCount = 0, ConcurrencyStamp = "47bb81f3-72f3-4fc7-b331-84b440e8d082", Email = "student4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student4@gmail.com", NormalizedUserName = "student4@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEN5j9RqeRgRqW1/OAP8Ip32iH1j4krP+zMXPqkmPytk7NX4qmuHk/kLKA45aZGR3iw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student4@gmail.com" },
                        new { Id = new Guid("7803567a-77cb-41a7-b7c4-6001ce3ba460"), AccessFailedCount = 0, ConcurrencyStamp = "f51e1485-b73b-4138-88b5-ff3010302108", Email = "student5@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student5@gmail.com", NormalizedUserName = "student5@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEBcCX/1t7LEZ51S1DXzm3BZqBqrQMf3VjzEa147xcccUUpt/T+c0JO+HHQaZCEysPQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student5@gmail.com" },
                        new { Id = new Guid("393f7550-c316-4235-a64e-9a34df3994bf"), AccessFailedCount = 0, ConcurrencyStamp = "2ef66b67-4b23-4a23-9947-fefb4ced9f56", Email = "student6@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student6@gmail.com", NormalizedUserName = "student6@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEJT/iwMMAU/sJ19TNCedBLcKRCm6gTOYKuMfCrQq3JlbT1xO2vtCCvMxVZIO/78bjg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student6@gmail.com" },
                        new { Id = new Guid("4ea80fdf-b840-47e5-8285-0718d4687bae"), AccessFailedCount = 0, ConcurrencyStamp = "4b56baf1-5899-489d-8fcd-c5ab615f7dc1", Email = "student7@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student7@gmail.com", NormalizedUserName = "student7@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEM315OGts0K/Jfy/3cI2AoJFiiMpRX3+xmjkxyZbiKrikszzjMEmMb4clX//UJiI4Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student7@gmail.com" },
                        new { Id = new Guid("e7779777-8615-4f78-8ad8-7d2909d5703b"), AccessFailedCount = 0, ConcurrencyStamp = "1e577bcb-6518-4e00-afcf-977b13035d24", Email = "student8@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student8@gmail.com", NormalizedUserName = "student8@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEIbPMONX06+GwPpEYTfT3sS5kujEgUx6ZAZ5zuBCokIhUFEqLjRdj8vCWmAjK7G1hw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student8@gmail.com" },
                        new { Id = new Guid("ebe1f763-f12b-4d83-a813-c8873c03705f"), AccessFailedCount = 0, ConcurrencyStamp = "ccce0abe-eaa7-480d-8d9b-46876db1af17", Email = "promoter1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter1@gmail.com", NormalizedUserName = "promoter1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEM75ofv6zr7bomnpW+7VlkTKxuTV8rw9tz6dG5thCjSGK1vztdBNhrVYXwKucigAZg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter1@gmail.com" },
                        new { Id = new Guid("0d2ee102-06a9-4a3b-ab6a-ee954f364598"), AccessFailedCount = 0, ConcurrencyStamp = "3dacc041-0e7c-4425-93ce-633952e17572", Email = "promoter2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter2@gmail.com", NormalizedUserName = "promoter2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEJlWGaIyqxyEjQYtWZaQJg3cz6Dszn0j/z0uGY1k/RVM+vAc037nJl7yM3BzhKnK0w==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter2@gmail.com" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExpectedNumberOfBachelorProposals");

                    b.Property<int>("ExpectedNumberOfMasterProposals");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Promoters");

                    b.HasData(
                        new { Id = new Guid("a54b01ba-e82f-4e9f-994e-0c25912b43d4"), ExpectedNumberOfBachelorProposals = 3, ExpectedNumberOfMasterProposals = 4, FirstName = "Jan", LastName = "Kowalski", UserId = new Guid("ebe1f763-f12b-4d83-a813-c8873c03705f") },
                        new { Id = new Guid("0f0524ab-5f82-4f85-b333-243bac54c4f2"), ExpectedNumberOfBachelorProposals = 3, ExpectedNumberOfMasterProposals = 4, FirstName = "Jan", LastName = "Kowalski", UserId = new Guid("0d2ee102-06a9-4a3b-ab6a-ee954f364598") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Level");

                    b.Property<int>("Mode");

                    b.Property<Guid>("PromoterId");

                    b.Property<int>("Status");

                    b.Property<string>("Topic")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PromoterId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ProposalId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new { Id = new Guid("d4be0990-7710-4575-b784-57e62f8a9b56"), UserId = new Guid("5760171d-29af-4dbc-962d-f5deb91d34f0") },
                        new { Id = new Guid("8db17ea4-6e22-49f5-b5c3-0c2d19bf5775"), UserId = new Guid("de74c9e3-a456-4c5a-8af6-dbac149a47aa") },
                        new { Id = new Guid("3985c39c-ec7d-45dc-8a8c-ba6ac4192c67"), UserId = new Guid("30caf02f-ac64-47ec-bf99-151e4d1a7e88") },
                        new { Id = new Guid("c7f6a624-663d-4df2-8a02-18584312aac2"), UserId = new Guid("711713fb-c525-411a-b6bc-b072e7f50ecc") },
                        new { Id = new Guid("79bb4932-b9ed-4743-ac4b-e8403dc6e30c"), UserId = new Guid("7803567a-77cb-41a7-b7c4-6001ce3ba460") },
                        new { Id = new Guid("250c8d11-e424-40a5-a911-5f003873fddf"), UserId = new Guid("393f7550-c316-4235-a64e-9a34df3994bf") },
                        new { Id = new Guid("aa4df3ba-625f-4e4f-b4e0-73aec3f9b0cd"), UserId = new Guid("4ea80fdf-b840-47e5-8285-0718d4687bae") },
                        new { Id = new Guid("66b318fd-4dbf-44df-992d-2785e5fbfd61"), UserId = new Guid("e7779777-8615-4f78-8ad8-7d2909d5703b") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.HasOne("Capri.Database.Entities.Promoter", "Promoter")
                        .WithMany("Proposals")
                        .HasForeignKey("PromoterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.HasOne("Capri.Database.Entities.Proposal")
                        .WithMany("Students")
                        .HasForeignKey("ProposalId");

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

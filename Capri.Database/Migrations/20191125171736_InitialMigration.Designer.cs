// <auto-generated />
using System;
using Capri.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capri.Database.Migrations
{
    [DbContext(typeof(CapriDbContext))]
    [Migration("20191125171736_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = new Guid("59a2f9f4-2fb3-4aec-86be-129a34230e4e"), ConcurrencyStamp = "cf35ea79-503f-4ecd-9c49-e6fde7943605", Name = "admin", NormalizedName = "admin" },
                        new { Id = new Guid("d440ebf7-a97b-45ec-a9d9-b73ac8ba0142"), ConcurrencyStamp = "327fa64d-4ec8-46c2-8675-1e2fc001f855", Name = "dean", NormalizedName = "dean" },
                        new { Id = new Guid("44e64359-97d0-433e-8d10-e30a7bcd1890"), ConcurrencyStamp = "5f1a05e0-c93d-495c-95da-37ad8651fdba", Name = "student", NormalizedName = "student" },
                        new { Id = new Guid("1b462bb0-b61a-4682-81e5-3dfffc4f94f8"), ConcurrencyStamp = "5cf16fa0-b514-480a-9f88-c773dcf52efa", Name = "promoter", NormalizedName = "promoter" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { Id = new Guid("f42fe2ce-922b-464b-bf87-aab2194882b4"), RoleId = new Guid("59a2f9f4-2fb3-4aec-86be-129a34230e4e"), UserId = new Guid("942cf427-96cf-4aba-a61d-66a935ccbed9") },
                        new { Id = new Guid("c4872588-4747-43e3-810c-ac50507bcc29"), RoleId = new Guid("d440ebf7-a97b-45ec-a9d9-b73ac8ba0142"), UserId = new Guid("eb8c5966-34f0-441a-b3a4-f7e87d286960") },
                        new { Id = new Guid("b77ff6e8-7a67-440a-a561-a5c8a3005422"), RoleId = new Guid("d440ebf7-a97b-45ec-a9d9-b73ac8ba0142"), UserId = new Guid("d6066461-717f-4651-a383-e39d6049c7f3") },
                        new { Id = new Guid("b529a975-91e0-4034-ad6d-58e2d4afffe7"), RoleId = new Guid("44e64359-97d0-433e-8d10-e30a7bcd1890"), UserId = new Guid("e8ca8f6a-b21a-4e3e-a56c-07aec8b901de") },
                        new { Id = new Guid("0ec55dfd-7269-4842-bcae-7fde3df5edf9"), RoleId = new Guid("44e64359-97d0-433e-8d10-e30a7bcd1890"), UserId = new Guid("e3fe30b5-6e61-40ab-ae1f-9e8bb4781f07") },
                        new { Id = new Guid("bfaf6824-e2be-4830-b7a6-0a3034026595"), RoleId = new Guid("44e64359-97d0-433e-8d10-e30a7bcd1890"), UserId = new Guid("950a0500-1a2f-4a97-b05b-e9d2d71e43ce") },
                        new { Id = new Guid("6d2be9b6-00ee-4605-ad65-a28677f18bd3"), RoleId = new Guid("44e64359-97d0-433e-8d10-e30a7bcd1890"), UserId = new Guid("d874bfda-8a1d-4139-b59b-b99b42f467e7") },
                        new { Id = new Guid("f8ceca4c-30f4-4364-8785-b2ec24233b6c"), RoleId = new Guid("44e64359-97d0-433e-8d10-e30a7bcd1890"), UserId = new Guid("6e091079-66f0-4122-b511-4ef2cafd640b") },
                        new { Id = new Guid("911f15c1-ce27-43e8-8dfb-87bee6f2994a"), RoleId = new Guid("44e64359-97d0-433e-8d10-e30a7bcd1890"), UserId = new Guid("680efe41-4808-4011-b753-7ac805713c4f") },
                        new { Id = new Guid("eb49ccd1-1ead-42cb-bb32-acc6e1a1b94c"), RoleId = new Guid("44e64359-97d0-433e-8d10-e30a7bcd1890"), UserId = new Guid("a7d8c301-a633-4930-91e8-75d5f9723d04") },
                        new { Id = new Guid("e3a97e71-d929-438a-998f-da60ebb94447"), RoleId = new Guid("44e64359-97d0-433e-8d10-e30a7bcd1890"), UserId = new Guid("48377af8-66f8-49f7-8df7-47c80435589b") },
                        new { Id = new Guid("05330f1d-d536-49a3-86fd-ff013c301955"), RoleId = new Guid("1b462bb0-b61a-4682-81e5-3dfffc4f94f8"), UserId = new Guid("22914922-6813-412c-8397-4ce4147ba4ff") },
                        new { Id = new Guid("5c2f7569-1d53-4d99-b4ca-b84a2f6278e6"), RoleId = new Guid("1b462bb0-b61a-4682-81e5-3dfffc4f94f8"), UserId = new Guid("915b2342-b6c2-4d68-9e66-1c24fdc9aaca") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<Guid>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = new Guid("942cf427-96cf-4aba-a61d-66a935ccbed9"), AccessFailedCount = 0, ConcurrencyStamp = "e813262e-e28e-45e1-893a-30ae673e4cdb", Email = "admin1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "admin1@gmail.com", NormalizedUserName = "admin1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAELdn93MpoyFDwk0ZyQWEfOsC1NKHEcuvTsEWR9EwVQXWKJ6el8vfgPjBCHiNL521WQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "admin1@gmail.com" },
                        new { Id = new Guid("eb8c5966-34f0-441a-b3a4-f7e87d286960"), AccessFailedCount = 0, ConcurrencyStamp = "791c7efc-0b7e-4cb2-92ea-0b123cc331a8", Email = "dean1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean1@gmail.com", NormalizedUserName = "dean1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEEBrVc9PprDxX85VdNSWwRVuJLTWcK47Q//JrDex6KMHVZIF95j8q2WH/YtJO2SLxQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean1@gmail.com" },
                        new { Id = new Guid("d6066461-717f-4651-a383-e39d6049c7f3"), AccessFailedCount = 0, ConcurrencyStamp = "43187190-b9db-46f1-a810-12b470578294", Email = "dean2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean2@gmail.com", NormalizedUserName = "dean2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEDNehCkUDsoud2h/+RhGQM21Qm/xAUwclCplef8mCeqZ0qrPmMzAzrnRMFBMkLMdKQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean2@gmail.com" },
                        new { Id = new Guid("e8ca8f6a-b21a-4e3e-a56c-07aec8b901de"), AccessFailedCount = 0, ConcurrencyStamp = "bffa8adf-c45d-458c-8a17-785a108c8951", Email = "student1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student1@gmail.com", NormalizedUserName = "student1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEN+TzNgf0Pg6HrwYUNtOF+QYqgjvSKZfQqZ3rlBfOSYqxxOHEvsh3Uus8eadvGTQDA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student1@gmail.com" },
                        new { Id = new Guid("e3fe30b5-6e61-40ab-ae1f-9e8bb4781f07"), AccessFailedCount = 0, ConcurrencyStamp = "9ee3f14d-2077-41e8-8417-74b8420fe662", Email = "student2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student2@gmail.com", NormalizedUserName = "student2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEKHrYmG7D8ew5yVodBZpPzAT78p8PLCN1BKxpRYHQhO5RZ8GTJNJO2DNbGOH0+9JYA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student2@gmail.com" },
                        new { Id = new Guid("950a0500-1a2f-4a97-b05b-e9d2d71e43ce"), AccessFailedCount = 0, ConcurrencyStamp = "b403c94d-9ccd-4a49-ae42-08fdf5b404c0", Email = "student3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student3@gmail.com", NormalizedUserName = "student3@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAECAArZ82YJ2h/dAmb+I4SQktsDeaw7S/glmqeJwgMP0O0AkHUvIy36kzCNxNP57/Qw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student3@gmail.com" },
                        new { Id = new Guid("d874bfda-8a1d-4139-b59b-b99b42f467e7"), AccessFailedCount = 0, ConcurrencyStamp = "badb17e9-09d9-4c13-9de0-87cd1970c8d2", Email = "student4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student4@gmail.com", NormalizedUserName = "student4@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEK8TjKa7edbS6vDZT4goDYlmKARCZSGBEn9RM+cwt+B9k5O+ly4AbWhhhhp5amSPpw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student4@gmail.com" },
                        new { Id = new Guid("6e091079-66f0-4122-b511-4ef2cafd640b"), AccessFailedCount = 0, ConcurrencyStamp = "ef007129-bf75-44f2-a2dc-4626be88b39f", Email = "student5@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student5@gmail.com", NormalizedUserName = "student5@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEKwzmOgZOtiL3/gGWkguCBDLz6VasSrXwqwxO9Dn2ORcpaFthaIP+DzHOJrnnhxwQQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student5@gmail.com" },
                        new { Id = new Guid("680efe41-4808-4011-b753-7ac805713c4f"), AccessFailedCount = 0, ConcurrencyStamp = "2b624dac-9aed-4404-9ca1-5f3fbb0dc8b5", Email = "student6@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student6@gmail.com", NormalizedUserName = "student6@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEIDlXpkMgE/ybjt2/jD2cKBP/LI3vgVbJGC9rf+gn/zUp8vhAldbFDrSw++pewoYuA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student6@gmail.com" },
                        new { Id = new Guid("a7d8c301-a633-4930-91e8-75d5f9723d04"), AccessFailedCount = 0, ConcurrencyStamp = "6fca0db4-315b-436d-b1eb-d984332c18ed", Email = "student7@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student7@gmail.com", NormalizedUserName = "student7@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEHUOoqA1pWqDYQ4dh+9zbJymeNXf1XIQAMJ5+P22L3evkw2gzvWihYZuS6fSogS8Uw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student7@gmail.com" },
                        new { Id = new Guid("48377af8-66f8-49f7-8df7-47c80435589b"), AccessFailedCount = 0, ConcurrencyStamp = "05e2e09d-de44-46ab-8dd9-128d15a35731", Email = "student8@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student8@gmail.com", NormalizedUserName = "student8@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEO8YuZx/uCkjG6oXO7sfOmqZq+ICtY1ZWpkt4AUPpjWAmf7XKt0pZPo1LeAgrS/INA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student8@gmail.com" },
                        new { Id = new Guid("22914922-6813-412c-8397-4ce4147ba4ff"), AccessFailedCount = 0, ConcurrencyStamp = "03af4a7f-6b07-49d8-ab1e-c0520ed9c63f", Email = "promoter1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter1@gmail.com", NormalizedUserName = "promoter1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAENvyloM14XmN6Lej3XBTZlvdS5WR9ouRn8e7upuI8BfneL9lmbsmlWfQaNVHUHW3Cw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter1@gmail.com" },
                        new { Id = new Guid("915b2342-b6c2-4d68-9e66-1c24fdc9aaca"), AccessFailedCount = 0, ConcurrencyStamp = "560770e6-82ec-4722-b6fd-d297f5aec2e5", Email = "promoter2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter2@gmail.com", NormalizedUserName = "promoter2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEADHsWeJnl3a+fNpshptVxOey61D+dHn/JTWpIPf2vYmQwMgmj1tCxxZcu8ypUZHKQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter2@gmail.com" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanSubmitBachelorProposals");

                    b.Property<bool>("CanSubmitMasterProposals");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int>("Title");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Promoters");

                    b.HasData(
                        new { Id = new Guid("471245f0-df2b-40b9-b370-a3423fabedff"), CanSubmitBachelorProposals = true, CanSubmitMasterProposals = true, FirstName = "Jan", LastName = "Kowalski", Title = 0, UserId = new Guid("22914922-6813-412c-8397-4ce4147ba4ff") },
                        new { Id = new Guid("61e3b68d-0b71-48d6-b25e-3dd5065fc04c"), CanSubmitBachelorProposals = true, CanSubmitMasterProposals = true, FirstName = "Jan", LastName = "Kowalski", Title = 0, UserId = new Guid("915b2342-b6c2-4d68-9e66-1c24fdc9aaca") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Level");

                    b.Property<int>("Mode");

                    b.Property<Guid>("PromoterId");

                    b.Property<Guid?>("PromoterId1");

                    b.Property<int>("Status");

                    b.Property<string>("Topic")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PromoterId");

                    b.HasIndex("PromoterId1");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ProposalId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new { Id = new Guid("b557aa33-4624-4b3d-a437-af30ba8972a4"), UserId = new Guid("e8ca8f6a-b21a-4e3e-a56c-07aec8b901de") },
                        new { Id = new Guid("8484e6ca-6094-43a1-9a9f-3febfa4a3ccd"), UserId = new Guid("e3fe30b5-6e61-40ab-ae1f-9e8bb4781f07") },
                        new { Id = new Guid("23b91fcf-8ea6-494c-805c-33b1d4072334"), UserId = new Guid("950a0500-1a2f-4a97-b05b-e9d2d71e43ce") },
                        new { Id = new Guid("c9ef75ae-a1fe-488a-a4b4-c82af7c57c82"), UserId = new Guid("d874bfda-8a1d-4139-b59b-b99b42f467e7") },
                        new { Id = new Guid("d4b16902-0b12-48d4-8e9d-5ec44f152834"), UserId = new Guid("6e091079-66f0-4122-b511-4ef2cafd640b") },
                        new { Id = new Guid("522760b8-77e3-4838-99b5-03de9058fa86"), UserId = new Guid("680efe41-4808-4011-b753-7ac805713c4f") },
                        new { Id = new Guid("76850ec5-9f71-4a01-92f2-45a355e1956f"), UserId = new Guid("a7d8c301-a633-4930-91e8-75d5f9723d04") },
                        new { Id = new Guid("de23f28f-c9c7-426f-80a2-4569e9475e2b"), UserId = new Guid("48377af8-66f8-49f7-8df7-47c80435589b") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.HasOne("Capri.Database.Entities.Promoter", "Promoter")
                        .WithMany()
                        .HasForeignKey("PromoterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Capri.Database.Entities.Promoter")
                        .WithMany("Proposals")
                        .HasForeignKey("PromoterId1");
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.HasOne("Capri.Database.Entities.Proposal")
                        .WithMany("Students")
                        .HasForeignKey("ProposalId");

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

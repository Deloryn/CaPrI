// <auto-generated />
using System;
using Capri.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capri.Database.Migrations
{
    [DbContext(typeof(CapriDbContext))]
    [Migration("20191003162756_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = new Guid("e78bc187-e8b5-45c4-b33b-5717e61fec46"), ConcurrencyStamp = "29124110-3aa4-464f-a0f7-9887b2e3077d", Name = "admin", NormalizedName = "admin" },
                        new { Id = new Guid("2195c00a-aeb2-4fdd-a4e1-5914405b0232"), ConcurrencyStamp = "980b2457-4ea1-4746-b2aa-1db4f193e39e", Name = "dean", NormalizedName = "dean" },
                        new { Id = new Guid("e27a1eaa-62dc-473e-bc5e-8b53be54147a"), ConcurrencyStamp = "0a50de7d-0a4f-4a13-88e8-33dcc7e15d53", Name = "student", NormalizedName = "student" },
                        new { Id = new Guid("8196d3fb-8242-4ef1-98f5-a84641e872cc"), ConcurrencyStamp = "15f9c570-69ef-41a5-95f1-5ff9b0a60d78", Name = "promoter", NormalizedName = "promoter" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { Id = new Guid("292e36a9-fc57-4e6e-b2b5-38fd046d5054"), RoleId = new Guid("e78bc187-e8b5-45c4-b33b-5717e61fec46"), UserId = new Guid("0366953a-71e8-4f6c-b3d8-2196c36f63c0") },
                        new { Id = new Guid("37b94448-753b-4f7e-acb6-a13b83ab1a3c"), RoleId = new Guid("2195c00a-aeb2-4fdd-a4e1-5914405b0232"), UserId = new Guid("38dd8e9c-5b77-4de1-a93b-d6aad9b4b2e9") },
                        new { Id = new Guid("44d9de78-08d7-4be5-b9df-7a54c24bc93b"), RoleId = new Guid("2195c00a-aeb2-4fdd-a4e1-5914405b0232"), UserId = new Guid("155efa13-0af5-42ee-82de-a933dacfbf72") },
                        new { Id = new Guid("236603e8-b149-490d-b44d-ac7d7c751fc4"), RoleId = new Guid("e27a1eaa-62dc-473e-bc5e-8b53be54147a"), UserId = new Guid("5b2ddf01-17ef-43e5-afcc-e56999a223d2") },
                        new { Id = new Guid("91ed289c-ff8f-4f51-ad8e-31174e389be3"), RoleId = new Guid("e27a1eaa-62dc-473e-bc5e-8b53be54147a"), UserId = new Guid("193ee547-0487-4be6-8484-98bb490f1d28") },
                        new { Id = new Guid("4facfa07-e351-4d65-821f-9088ae6ed1c7"), RoleId = new Guid("e27a1eaa-62dc-473e-bc5e-8b53be54147a"), UserId = new Guid("147c9928-3d2d-440e-bd2c-783b9ae625a4") },
                        new { Id = new Guid("1ff6862d-559b-4de9-a17a-cf50c37df6d9"), RoleId = new Guid("e27a1eaa-62dc-473e-bc5e-8b53be54147a"), UserId = new Guid("0612bfba-673a-412a-8066-c4e8edf80ae0") },
                        new { Id = new Guid("da3492a6-a71f-486d-9131-ba6e48c78cef"), RoleId = new Guid("e27a1eaa-62dc-473e-bc5e-8b53be54147a"), UserId = new Guid("42611b34-024e-44e6-b9e2-9e899348226e") },
                        new { Id = new Guid("ab9dbd09-49d3-4b4e-9d01-7dc0ad3fc56f"), RoleId = new Guid("e27a1eaa-62dc-473e-bc5e-8b53be54147a"), UserId = new Guid("85744990-e124-44b1-9551-667f2d2b18f8") },
                        new { Id = new Guid("050d61a7-6c28-4063-9b30-6ccc4b5917a3"), RoleId = new Guid("e27a1eaa-62dc-473e-bc5e-8b53be54147a"), UserId = new Guid("1d98d2f9-fc2b-445e-9240-2b52f855fdff") },
                        new { Id = new Guid("29cdb480-bcf7-4454-b2eb-51f42f44f28e"), RoleId = new Guid("e27a1eaa-62dc-473e-bc5e-8b53be54147a"), UserId = new Guid("6a5041d4-61e5-4853-93c8-087e04a37eab") },
                        new { Id = new Guid("a3fb053d-f3ab-4cb1-9e0a-b23660a6dfd1"), RoleId = new Guid("8196d3fb-8242-4ef1-98f5-a84641e872cc"), UserId = new Guid("902c3696-477f-4a76-8010-f43bea1fc1ce") },
                        new { Id = new Guid("3ccf946c-9293-409d-9ab0-8631845672d2"), RoleId = new Guid("8196d3fb-8242-4ef1-98f5-a84641e872cc"), UserId = new Guid("1d6a3813-eedd-4ad8-8e85-acbd5742519a") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<Guid>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = new Guid("0366953a-71e8-4f6c-b3d8-2196c36f63c0"), AccessFailedCount = 0, ConcurrencyStamp = "becdc44f-eaab-4c22-b6ad-c6dfcb496b2d", Email = "admin1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "admin1@gmail.com", NormalizedUserName = "admin1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEGQ4cpCCAiXWe2D3z7ZeWkLQ8aDXZJ/LygFM2JsUmZDT3MB7H3L0FkD7ki7mRJm+ZQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "admin1@gmail.com" },
                        new { Id = new Guid("38dd8e9c-5b77-4de1-a93b-d6aad9b4b2e9"), AccessFailedCount = 0, ConcurrencyStamp = "7605842c-2a74-4787-8d0c-f3fec546d901", Email = "dean1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean1@gmail.com", NormalizedUserName = "dean1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEO/s9wLk8YG6C0tvzuF6W+4Tpi133OY6m3pr4QTBGFCYs0SpS8pX1+18g4hlDspeRA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean1@gmail.com" },
                        new { Id = new Guid("155efa13-0af5-42ee-82de-a933dacfbf72"), AccessFailedCount = 0, ConcurrencyStamp = "eb4aaeb4-8e6c-4267-aea7-251d0cb98886", Email = "dean2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean2@gmail.com", NormalizedUserName = "dean2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEG2pRwrFERd6d/LZxlmvCnkZ0rwIDmwrzHiShj7LFU4WNmIkVVTVpsm7QsHiZliiUg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean2@gmail.com" },
                        new { Id = new Guid("5b2ddf01-17ef-43e5-afcc-e56999a223d2"), AccessFailedCount = 0, ConcurrencyStamp = "eb8c928f-b4e5-4883-a72c-3dd664df3cc9", Email = "student1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student1@gmail.com", NormalizedUserName = "student1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEH1wNGtRAriaCwFL8dpq5Ia1QALAdU5XJSpLVDgcL01VTjlZvEenkkGsJsixoIrKZg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student1@gmail.com" },
                        new { Id = new Guid("193ee547-0487-4be6-8484-98bb490f1d28"), AccessFailedCount = 0, ConcurrencyStamp = "7791d7e4-24ca-4982-bec9-006d10955ce9", Email = "student2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student2@gmail.com", NormalizedUserName = "student2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEFzJBl8VTAknQuzF4Bc5NWpME04ksN+yp7sBTXIBiNjgHAKtK9nOjuz1iQpATBMcYg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student2@gmail.com" },
                        new { Id = new Guid("147c9928-3d2d-440e-bd2c-783b9ae625a4"), AccessFailedCount = 0, ConcurrencyStamp = "c32a7c72-66fd-4461-a866-f8c69296aa9b", Email = "student3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student3@gmail.com", NormalizedUserName = "student3@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEKUDKQ4BoLIXvpaQR+iG2qLpdVdhO7ukiGT8/Q85Ay+S/AlcNkI6pvuPH3Ytsl8Zpw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student3@gmail.com" },
                        new { Id = new Guid("0612bfba-673a-412a-8066-c4e8edf80ae0"), AccessFailedCount = 0, ConcurrencyStamp = "841e50b2-17c2-473a-adf4-7231ffc4d4e4", Email = "student4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student4@gmail.com", NormalizedUserName = "student4@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEJyOm+XFTxVJ14ViF1vKdAbVpKCWM6TyB7StnbFO1eBmUlu9B8pSuYvcd8Qh550OMg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student4@gmail.com" },
                        new { Id = new Guid("42611b34-024e-44e6-b9e2-9e899348226e"), AccessFailedCount = 0, ConcurrencyStamp = "16037304-858b-4a59-a9a6-40228dde0cea", Email = "student5@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student5@gmail.com", NormalizedUserName = "student5@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEPLvdLtlMgC3i8CO+689P8c/DPr2uWx3R51DZ27X7aDqJMtTcMDnGa8jxM5yoREpSQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student5@gmail.com" },
                        new { Id = new Guid("85744990-e124-44b1-9551-667f2d2b18f8"), AccessFailedCount = 0, ConcurrencyStamp = "1a839031-e885-4611-a0a7-f3cca286a566", Email = "student6@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student6@gmail.com", NormalizedUserName = "student6@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEFJ25qCuWA4PGFK8gNa6pI1eU6WzI9mPXYcJYq2J3oggvX2xznjind4MUHeiymOvmw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student6@gmail.com" },
                        new { Id = new Guid("1d98d2f9-fc2b-445e-9240-2b52f855fdff"), AccessFailedCount = 0, ConcurrencyStamp = "29d482e1-83f9-4bea-ae46-5a20ef7d1e48", Email = "student7@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student7@gmail.com", NormalizedUserName = "student7@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEMXoEg1s+vzDdUuxN/VrRiu/PHP/r+cY6O8R5dAhjC79h+2/07Ztl9drT7GrOhPU+g==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student7@gmail.com" },
                        new { Id = new Guid("6a5041d4-61e5-4853-93c8-087e04a37eab"), AccessFailedCount = 0, ConcurrencyStamp = "9d7561be-5055-461b-96dd-e557d5eacec7", Email = "student8@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student8@gmail.com", NormalizedUserName = "student8@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEIanSbymb8Qq83HRSmEMzMjvpYxmVRrK46f240Z2hGSuvm9n3vqBEzLpF+yI60aZpg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student8@gmail.com" },
                        new { Id = new Guid("902c3696-477f-4a76-8010-f43bea1fc1ce"), AccessFailedCount = 0, ConcurrencyStamp = "9fbe29ad-acc1-4f8a-971f-646b6c5638b8", Email = "promoter1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter1@gmail.com", NormalizedUserName = "promoter1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEHtNC0QbWBbf4W0zODmc8l+sdGZTvAmwdWwq8wE76ssLtt+7eYfOaztshVaJFYVSwA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter1@gmail.com" },
                        new { Id = new Guid("1d6a3813-eedd-4ad8-8e85-acbd5742519a"), AccessFailedCount = 0, ConcurrencyStamp = "4be4cabb-3ffb-4291-bab7-b34cc778deda", Email = "promoter2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter2@gmail.com", NormalizedUserName = "promoter2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEFPgMwJFrA/cHssXDggW6bf5QT8e+ForN0FoNOxzvBtHRoj+5utOv6MmtHUGO5hYOw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter2@gmail.com" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanSubmitBachelorProposals");

                    b.Property<bool>("CanSubmitMasterProposals");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Promoters");

                    b.HasData(
                        new { Id = new Guid("fbe254eb-c9ec-48d2-bb3e-b459d7b8180b"), CanSubmitBachelorProposals = true, CanSubmitMasterProposals = true, UserId = new Guid("902c3696-477f-4a76-8010-f43bea1fc1ce") },
                        new { Id = new Guid("49df02bc-9520-4bc8-8ce8-7fd16403c03e"), CanSubmitBachelorProposals = true, CanSubmitMasterProposals = true, UserId = new Guid("1d6a3813-eedd-4ad8-8e85-acbd5742519a") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid?>("PromoterId");

                    b.Property<int>("Status");

                    b.Property<string>("Topic")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("PromoterId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ProposalId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new { Id = new Guid("0c9af1d6-5889-4c40-89f0-8a6b8625d586"), UserId = new Guid("5b2ddf01-17ef-43e5-afcc-e56999a223d2") },
                        new { Id = new Guid("3facc1cc-7930-4a37-816f-a9150079c228"), UserId = new Guid("193ee547-0487-4be6-8484-98bb490f1d28") },
                        new { Id = new Guid("f194ba25-9f1c-4ae3-a2e3-7594be36dd69"), UserId = new Guid("147c9928-3d2d-440e-bd2c-783b9ae625a4") },
                        new { Id = new Guid("01d20285-719e-4f54-9be5-d45a9919f542"), UserId = new Guid("0612bfba-673a-412a-8066-c4e8edf80ae0") },
                        new { Id = new Guid("c476a1eb-db63-4105-9781-781bbcb764e2"), UserId = new Guid("42611b34-024e-44e6-b9e2-9e899348226e") },
                        new { Id = new Guid("e9e95e41-aadc-4885-8780-479a663be362"), UserId = new Guid("85744990-e124-44b1-9551-667f2d2b18f8") },
                        new { Id = new Guid("2be6f969-3ffc-4a35-8ddf-a69bd02b0b70"), UserId = new Guid("1d98d2f9-fc2b-445e-9240-2b52f855fdff") },
                        new { Id = new Guid("54451773-6312-43ec-9570-4bcd4b3084ba"), UserId = new Guid("6a5041d4-61e5-4853-93c8-087e04a37eab") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.HasOne("Capri.Database.Entities.Promoter")
                        .WithMany("Proposals")
                        .HasForeignKey("PromoterId");
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.HasOne("Capri.Database.Entities.Proposal")
                        .WithMany("Students")
                        .HasForeignKey("ProposalId");

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

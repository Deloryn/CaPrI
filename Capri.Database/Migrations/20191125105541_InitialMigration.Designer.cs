// <auto-generated />
using System;
using Capri.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capri.Database.Migrations
{
    [DbContext(typeof(CapriDbContext))]
    [Migration("20191125105541_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = new Guid("4949a0f7-ea6a-48b0-8495-de5bdedc9112"), ConcurrencyStamp = "06d06898-60a5-489e-9498-95dc54a55d25", Name = "admin", NormalizedName = "admin" },
                        new { Id = new Guid("e20e49d3-01d1-4f8f-9fb7-4aabf8c7ef48"), ConcurrencyStamp = "414056bf-2974-49d1-9136-7cec34e60de8", Name = "dean", NormalizedName = "dean" },
                        new { Id = new Guid("37cfc35b-b196-442c-b5ea-645f542cd308"), ConcurrencyStamp = "f70dbd6c-177f-4c99-b309-7cfb7b65977c", Name = "student", NormalizedName = "student" },
                        new { Id = new Guid("848b3e60-02de-4b57-8a13-67dad13850df"), ConcurrencyStamp = "7ee3a676-4451-4235-8042-f50292079bf1", Name = "promoter", NormalizedName = "promoter" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { Id = new Guid("07870bf6-52ac-4f95-8345-7fa43cd8377a"), RoleId = new Guid("4949a0f7-ea6a-48b0-8495-de5bdedc9112"), UserId = new Guid("f85d2ece-58ec-4922-85a8-3cb1d0ed4e06") },
                        new { Id = new Guid("3ffb1094-b542-4a08-b4c9-98feb35ca4f3"), RoleId = new Guid("e20e49d3-01d1-4f8f-9fb7-4aabf8c7ef48"), UserId = new Guid("b557a033-8b23-465a-93a4-90879534c470") },
                        new { Id = new Guid("38f87300-5f11-4c5e-aa74-fc4b20076c8f"), RoleId = new Guid("e20e49d3-01d1-4f8f-9fb7-4aabf8c7ef48"), UserId = new Guid("44a21a0d-14b5-4e13-a090-8d9904c1315c") },
                        new { Id = new Guid("089c81ed-5490-4d6e-ad88-8e9576403b7b"), RoleId = new Guid("37cfc35b-b196-442c-b5ea-645f542cd308"), UserId = new Guid("3f968515-5d19-4381-b4d4-7973e9749a0d") },
                        new { Id = new Guid("4aecdbd1-e922-4886-8ed4-0622fa53e3c1"), RoleId = new Guid("37cfc35b-b196-442c-b5ea-645f542cd308"), UserId = new Guid("92101757-a6f0-40ba-8b17-54200b3cdaf4") },
                        new { Id = new Guid("2c044cf8-717b-4d33-8104-b900ce05a69f"), RoleId = new Guid("37cfc35b-b196-442c-b5ea-645f542cd308"), UserId = new Guid("69e2b8fc-7db7-4c4c-9add-d5be8468c9d6") },
                        new { Id = new Guid("73b40b23-80b9-42e0-9530-5fdfcd8338d0"), RoleId = new Guid("37cfc35b-b196-442c-b5ea-645f542cd308"), UserId = new Guid("5a5942c2-89d2-47c9-85b4-ecf29bae5745") },
                        new { Id = new Guid("9915face-d6ce-4534-8975-ef78cb474aac"), RoleId = new Guid("37cfc35b-b196-442c-b5ea-645f542cd308"), UserId = new Guid("ef0f767d-6fd9-4caa-9242-149c964286f5") },
                        new { Id = new Guid("d396fb08-279e-4c6c-92c7-4f86572c50aa"), RoleId = new Guid("37cfc35b-b196-442c-b5ea-645f542cd308"), UserId = new Guid("b6e30589-0007-49d3-b809-94082439195c") },
                        new { Id = new Guid("399a58c7-eb42-4aba-a824-3954130d3770"), RoleId = new Guid("37cfc35b-b196-442c-b5ea-645f542cd308"), UserId = new Guid("55f69499-f43e-40e6-815c-7f90b30e0c48") },
                        new { Id = new Guid("d1ea7158-0425-47e4-915c-f08ff34e60e3"), RoleId = new Guid("37cfc35b-b196-442c-b5ea-645f542cd308"), UserId = new Guid("50a23bc0-09b8-4878-85d7-d30221241d0b") },
                        new { Id = new Guid("b3e9681f-2f4f-4919-b2fa-7d6df52ea20c"), RoleId = new Guid("848b3e60-02de-4b57-8a13-67dad13850df"), UserId = new Guid("00b694f9-16e6-4694-87be-67b86f5b125f") },
                        new { Id = new Guid("93c2de63-6f88-47b4-8005-c7609fc73cb9"), RoleId = new Guid("848b3e60-02de-4b57-8a13-67dad13850df"), UserId = new Guid("0b6e162b-ec2c-4531-95e0-3cb8e531bc1e") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<Guid>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = new Guid("f85d2ece-58ec-4922-85a8-3cb1d0ed4e06"), AccessFailedCount = 0, ConcurrencyStamp = "2dc7277c-d543-4a87-a312-52cd9b0f1ce4", Email = "admin1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "admin1@gmail.com", NormalizedUserName = "admin1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEG8Entt6FFjzEmaCyo6jLAk3pYpjs48QbP7X88z094jHX+kJrxv5euLIIy/PN9HvEQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "admin1@gmail.com" },
                        new { Id = new Guid("b557a033-8b23-465a-93a4-90879534c470"), AccessFailedCount = 0, ConcurrencyStamp = "c27c9cd8-8b2d-4e5b-9c59-d2f736a8f770", Email = "dean1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean1@gmail.com", NormalizedUserName = "dean1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEAhfdiAUiEqbndUZJjNFHMRI2GtHUrZxIgPMeE2xt/vgTJhcH0ebfXDP5B8TWbD29Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean1@gmail.com" },
                        new { Id = new Guid("44a21a0d-14b5-4e13-a090-8d9904c1315c"), AccessFailedCount = 0, ConcurrencyStamp = "75f51e0b-6617-4abd-a6ed-a330d86a9e3d", Email = "dean2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean2@gmail.com", NormalizedUserName = "dean2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEIDtXc3i4ZFd3Bpl1keXF6Iv+SRno+Jc8ejtZ9z+Fmmvj37FWgGqkiQzeQph4tqJIg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean2@gmail.com" },
                        new { Id = new Guid("3f968515-5d19-4381-b4d4-7973e9749a0d"), AccessFailedCount = 0, ConcurrencyStamp = "cc38b001-0c7e-4490-b58d-36753f3ed451", Email = "student1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student1@gmail.com", NormalizedUserName = "student1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEGglLzjMYbEOmKuc706SPUvdBgIczilcocKh3MQWY1PDvwpjRUtXTcQtJ5SQaYw0+Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student1@gmail.com" },
                        new { Id = new Guid("92101757-a6f0-40ba-8b17-54200b3cdaf4"), AccessFailedCount = 0, ConcurrencyStamp = "c510f7cc-f10c-4e1f-85c8-5471aed63257", Email = "student2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student2@gmail.com", NormalizedUserName = "student2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEPJBUfvvPeuF1EgijVzxMd4XXBzw7ShUyOLav8FB4ZWKbY1rLJoIQQWmi2RC6Wtn2Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student2@gmail.com" },
                        new { Id = new Guid("69e2b8fc-7db7-4c4c-9add-d5be8468c9d6"), AccessFailedCount = 0, ConcurrencyStamp = "02ea6484-7100-4029-b351-59467dc73e9e", Email = "student3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student3@gmail.com", NormalizedUserName = "student3@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAENbSi/c/2MYlsXFZCSJfiUBDwv1WSvey/k90jamq8qn2ZvNJxqoibLo4Jpj/i+ijuw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student3@gmail.com" },
                        new { Id = new Guid("5a5942c2-89d2-47c9-85b4-ecf29bae5745"), AccessFailedCount = 0, ConcurrencyStamp = "ef27e10a-da12-4792-8e4c-e86935de8f03", Email = "student4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student4@gmail.com", NormalizedUserName = "student4@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEM9PyB0gRH3FhRQRdVkDUsVAe5eqeGBhFHGa/KQG2gagoTRt0sKKJ5pcNvEvQbT6yg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student4@gmail.com" },
                        new { Id = new Guid("ef0f767d-6fd9-4caa-9242-149c964286f5"), AccessFailedCount = 0, ConcurrencyStamp = "8402c58a-fbe1-4b10-b565-3a9ef0c2de39", Email = "student5@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student5@gmail.com", NormalizedUserName = "student5@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAELv8subnVyh5Vw8OonekkvAQ017IhO0+scdYAPX8SRmj7rQEGuDP5qNAguDM84oh1Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student5@gmail.com" },
                        new { Id = new Guid("b6e30589-0007-49d3-b809-94082439195c"), AccessFailedCount = 0, ConcurrencyStamp = "a775008d-ec47-46c4-ace3-8e8d0253e442", Email = "student6@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student6@gmail.com", NormalizedUserName = "student6@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAECX2DrEDXzAoUKhY2S7ghKzOv75xUw+/GVAyjUPmYmXYr03snh0OENnoDtOGITmvzQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student6@gmail.com" },
                        new { Id = new Guid("55f69499-f43e-40e6-815c-7f90b30e0c48"), AccessFailedCount = 0, ConcurrencyStamp = "27055214-f684-41ee-96e9-95614dac7570", Email = "student7@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student7@gmail.com", NormalizedUserName = "student7@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEOSh9UMwFZCLmzFYKPin53lnX8LQDstefSObGEzfe50LHgw3Q/lIUeN4n0wq+nOHqA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student7@gmail.com" },
                        new { Id = new Guid("50a23bc0-09b8-4878-85d7-d30221241d0b"), AccessFailedCount = 0, ConcurrencyStamp = "dfdbc037-3df7-4977-a8c8-640b180987ee", Email = "student8@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student8@gmail.com", NormalizedUserName = "student8@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEAfE5tXzWpjL7PK1wqlqG/PUJ6q3kNMqhsGnLPYxzHVIpkURN39iwsTHf5e0ig+QLA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student8@gmail.com" },
                        new { Id = new Guid("00b694f9-16e6-4694-87be-67b86f5b125f"), AccessFailedCount = 0, ConcurrencyStamp = "b8df243c-1c9c-4e33-9be9-9315d6f844c4", Email = "promoter1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter1@gmail.com", NormalizedUserName = "promoter1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEKueuLZtoO+5cWbOArY5xbf2qEOSoO2MADYXGiYv/zIcZfmmoEWVdHqBU0MsxknoNQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter1@gmail.com" },
                        new { Id = new Guid("0b6e162b-ec2c-4531-95e0-3cb8e531bc1e"), AccessFailedCount = 0, ConcurrencyStamp = "34b3817c-2831-4a3a-a75f-bc8edb1c6e4b", Email = "promoter2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter2@gmail.com", NormalizedUserName = "promoter2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEJfh94jYsNzpkZjToRnPwpPmvwq3VuIKiaeA/s6mI2rgnOv+kqZlGaO6UstBUbWGRA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter2@gmail.com" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanSubmitBachelorProposals");

                    b.Property<bool>("CanSubmitMasterProposals");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Promoters");

                    b.HasData(
                        new { Id = new Guid("b3521b30-d419-4a7c-89ab-94d1b983b59c"), CanSubmitBachelorProposals = true, CanSubmitMasterProposals = true, FirstName = "Jan", LastName = "Kowalski", Title = "Phd.", UserId = new Guid("00b694f9-16e6-4694-87be-67b86f5b125f") },
                        new { Id = new Guid("fc151c25-1427-4d6b-9509-bd6eca80df9e"), CanSubmitBachelorProposals = true, CanSubmitMasterProposals = true, FirstName = "Jan", LastName = "Kowalski", Title = "Phd.", UserId = new Guid("0b6e162b-ec2c-4531-95e0-3cb8e531bc1e") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Level");

                    b.Property<int>("Mode");

                    b.Property<Guid>("PromoterId");

                    b.Property<Guid?>("PromoterId1");

                    b.Property<int>("Status");

                    b.Property<string>("Topic")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PromoterId");

                    b.HasIndex("PromoterId1");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ProposalId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new { Id = new Guid("a3b6a2f0-b06c-4c1c-a732-1860b0cb3e7c"), UserId = new Guid("3f968515-5d19-4381-b4d4-7973e9749a0d") },
                        new { Id = new Guid("5b580e21-7765-4d31-a1cc-fe4a38317003"), UserId = new Guid("92101757-a6f0-40ba-8b17-54200b3cdaf4") },
                        new { Id = new Guid("a81391b2-5447-46f1-8344-7836fa00b4d8"), UserId = new Guid("69e2b8fc-7db7-4c4c-9add-d5be8468c9d6") },
                        new { Id = new Guid("7d2b0013-672c-43dd-b321-19623b4bec4b"), UserId = new Guid("5a5942c2-89d2-47c9-85b4-ecf29bae5745") },
                        new { Id = new Guid("f974589a-be25-4ecd-a37f-21eb9a564881"), UserId = new Guid("ef0f767d-6fd9-4caa-9242-149c964286f5") },
                        new { Id = new Guid("be107470-7a37-4ece-b48d-95c6c8cea576"), UserId = new Guid("b6e30589-0007-49d3-b809-94082439195c") },
                        new { Id = new Guid("0c8d5cec-a26c-425c-a552-1aca9795275f"), UserId = new Guid("55f69499-f43e-40e6-815c-7f90b30e0c48") },
                        new { Id = new Guid("8f7d3030-f48f-4d64-a987-f83ab8b52d86"), UserId = new Guid("50a23bc0-09b8-4878-85d7-d30221241d0b") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.HasOne("Capri.Database.Entities.Promoter", "Promoter")
                        .WithMany()
                        .HasForeignKey("PromoterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Capri.Database.Entities.Promoter")
                        .WithMany("Proposals")
                        .HasForeignKey("PromoterId1");
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.HasOne("Capri.Database.Entities.Proposal")
                        .WithMany("Students")
                        .HasForeignKey("ProposalId");

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Capri.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capri.Database.Migrations
{
    [DbContext(typeof(CapriDbContext))]
    [Migration("20191213110748_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = new Guid("c02cc218-8b38-482f-9a8f-d0adef177002"), ConcurrencyStamp = "ae3bf9c9-11a6-4685-92e1-eb91dcfb538f", Name = "dean", NormalizedName = "dean" },
                        new { Id = new Guid("ee0ef896-c347-4205-a71f-9c5acca847ad"), ConcurrencyStamp = "23ea6bb3-c95e-41a6-869d-f9c0aae3c08b", Name = "student", NormalizedName = "student" },
                        new { Id = new Guid("f690a490-8590-4133-8f69-6a71cc8caaf7"), ConcurrencyStamp = "a406b976-1105-4659-8133-b17756cdb555", Name = "promoter", NormalizedName = "promoter" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { Id = new Guid("6fedbbd9-5805-4fd9-be10-50869a6ff0ce"), RoleId = new Guid("c02cc218-8b38-482f-9a8f-d0adef177002"), UserId = new Guid("8cf1f857-7891-438f-b220-c9badcb834de") },
                        new { Id = new Guid("b2670c65-edfb-4736-9953-5ff20e1e2841"), RoleId = new Guid("c02cc218-8b38-482f-9a8f-d0adef177002"), UserId = new Guid("68ac2b22-0c92-46da-a800-deae10e9470b") },
                        new { Id = new Guid("fecb04cb-687e-42c7-82de-4c6a75951d31"), RoleId = new Guid("ee0ef896-c347-4205-a71f-9c5acca847ad"), UserId = new Guid("87b48860-66dc-45d6-bfad-4140f4783e52") },
                        new { Id = new Guid("502d80fc-6e09-4622-8ad0-a216502eb927"), RoleId = new Guid("ee0ef896-c347-4205-a71f-9c5acca847ad"), UserId = new Guid("948febcd-be78-4bc4-a15f-197cd253faa4") },
                        new { Id = new Guid("253fe6c3-5974-4f94-a536-ffe73cfbc93f"), RoleId = new Guid("ee0ef896-c347-4205-a71f-9c5acca847ad"), UserId = new Guid("00d328de-5529-4954-9cbd-dd568ffe830a") },
                        new { Id = new Guid("bc22c227-ee68-4a69-894e-827e33642ee0"), RoleId = new Guid("ee0ef896-c347-4205-a71f-9c5acca847ad"), UserId = new Guid("4a22fdde-cb73-40e7-b25b-fbd712cea748") },
                        new { Id = new Guid("48aea09b-4be3-4372-88bc-d46d78a1552b"), RoleId = new Guid("ee0ef896-c347-4205-a71f-9c5acca847ad"), UserId = new Guid("1e5b2a68-59e0-400b-b0a8-6204aa556be6") },
                        new { Id = new Guid("9aabdabd-8d1b-4c38-a2d0-0f88dca17533"), RoleId = new Guid("ee0ef896-c347-4205-a71f-9c5acca847ad"), UserId = new Guid("5614ff52-bfb7-463f-8445-9ae4c929c359") },
                        new { Id = new Guid("4ae4e691-dcff-4236-94ca-c97c102bc66c"), RoleId = new Guid("ee0ef896-c347-4205-a71f-9c5acca847ad"), UserId = new Guid("f91a69b4-fc27-4390-8734-b13cb48dfad9") },
                        new { Id = new Guid("d979fc9c-94d3-419a-a4e9-014e5664b73c"), RoleId = new Guid("ee0ef896-c347-4205-a71f-9c5acca847ad"), UserId = new Guid("895246e1-b5fe-4980-afb4-07f9ff4f3a15") },
                        new { Id = new Guid("486c4119-0425-4802-ba9c-a922afa7ce1b"), RoleId = new Guid("f690a490-8590-4133-8f69-6a71cc8caaf7"), UserId = new Guid("55b1b2f4-9b5a-4cbe-8646-0eba7efe40bd") },
                        new { Id = new Guid("2a21d8e5-575a-41d9-99ed-fbb5c06a3db9"), RoleId = new Guid("f690a490-8590-4133-8f69-6a71cc8caaf7"), UserId = new Guid("df9882d8-2cc3-48e5-898a-5735df64421f") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<Guid>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = new Guid("8cf1f857-7891-438f-b220-c9badcb834de"), AccessFailedCount = 0, ConcurrencyStamp = "683642fe-21ed-4785-a9f5-0c07206e8222", Email = "dean1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean1@gmail.com", NormalizedUserName = "dean1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEAzoVtW0aXRYCmFYthHbEKigMuaSdMCRj+OPt9E1tThoHrMVnbCG/KtBN+3NMr4W+A==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean1@gmail.com" },
                        new { Id = new Guid("68ac2b22-0c92-46da-a800-deae10e9470b"), AccessFailedCount = 0, ConcurrencyStamp = "0c750628-8bd6-43f3-9657-f77736eb5795", Email = "dean2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean2@gmail.com", NormalizedUserName = "dean2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEEqkWBIF9X14VFc60mAyHlBQecI79emU7D/4Trksm+o2fN6iDHuhHBShHPr4LiF0ag==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean2@gmail.com" },
                        new { Id = new Guid("87b48860-66dc-45d6-bfad-4140f4783e52"), AccessFailedCount = 0, ConcurrencyStamp = "b71f69ac-3a8f-41f0-8125-82d06b79f345", Email = "student1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student1@gmail.com", NormalizedUserName = "student1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEKh3Tg8lMP8l5HZx3eYngaoQ7knyFQ3qXRyR37ky9n48NYeCL+AE6mcneYMUsAGO4g==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student1@gmail.com" },
                        new { Id = new Guid("948febcd-be78-4bc4-a15f-197cd253faa4"), AccessFailedCount = 0, ConcurrencyStamp = "f1175169-7c63-4ebd-94a3-8e49c5ffca88", Email = "student2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student2@gmail.com", NormalizedUserName = "student2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEG+0XnQhrOmTjjZ20/MvH6qP0Dd3rrB6VM+sY9hKVpHfXL84lElouct2pVBNjQyFMg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student2@gmail.com" },
                        new { Id = new Guid("00d328de-5529-4954-9cbd-dd568ffe830a"), AccessFailedCount = 0, ConcurrencyStamp = "494a5b76-c4c2-43a7-abe7-bae617cdd653", Email = "student3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student3@gmail.com", NormalizedUserName = "student3@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEA8n6sYR7k9OCY13qSyFfGW6i93fX8Nuwv9PeT4Kf0tfOHutsqZI/JdBSVRiiWJyHw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student3@gmail.com" },
                        new { Id = new Guid("4a22fdde-cb73-40e7-b25b-fbd712cea748"), AccessFailedCount = 0, ConcurrencyStamp = "7b1c8cba-6e39-45c3-a482-f0b48f074e46", Email = "student4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student4@gmail.com", NormalizedUserName = "student4@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEFNbf3bPtLrRdbV3NEyhrPL1eVT6RZiVKCnZpkCnlHks+jCEXNC0qKPXNREHXims6Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student4@gmail.com" },
                        new { Id = new Guid("1e5b2a68-59e0-400b-b0a8-6204aa556be6"), AccessFailedCount = 0, ConcurrencyStamp = "f41de217-be71-490d-b66e-df878b5cf404", Email = "student5@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student5@gmail.com", NormalizedUserName = "student5@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAELQBZCaQYYmE49wR01V2KlQ32hxYr/9HpLLdszQLbGg/292uY4qhjytyWD5MTiWl+w==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student5@gmail.com" },
                        new { Id = new Guid("5614ff52-bfb7-463f-8445-9ae4c929c359"), AccessFailedCount = 0, ConcurrencyStamp = "ef26953a-27fe-4da6-a557-f5f0be8a9243", Email = "student6@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student6@gmail.com", NormalizedUserName = "student6@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAENVdUL7iA0NuoWE3jlePgwzeF1aL/W/sw6WFnk5CYuykMrx5wB2SDrkDJ2xh2zShAg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student6@gmail.com" },
                        new { Id = new Guid("f91a69b4-fc27-4390-8734-b13cb48dfad9"), AccessFailedCount = 0, ConcurrencyStamp = "7a6b324e-6ddc-47c4-b7b0-edb0cad8c820", Email = "student7@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student7@gmail.com", NormalizedUserName = "student7@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEO65mRG+Y5k4/iIkpTUlpXQxJRvrORadqWRbuJh+QtobZ/HQXdR/H8BCY0XzXMg1ug==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student7@gmail.com" },
                        new { Id = new Guid("895246e1-b5fe-4980-afb4-07f9ff4f3a15"), AccessFailedCount = 0, ConcurrencyStamp = "c531f18e-a6ab-4aad-a352-1f7f1ef8101b", Email = "student8@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student8@gmail.com", NormalizedUserName = "student8@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEI30krRFlXqURKwi1J1d/WdE2QU/NqeH+Z4Xz6CCRTDsP83Em1d5//OL8YcEwn3IiQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student8@gmail.com" },
                        new { Id = new Guid("55b1b2f4-9b5a-4cbe-8646-0eba7efe40bd"), AccessFailedCount = 0, ConcurrencyStamp = "c87b6b74-6cb8-4284-badd-5391158b80e0", Email = "promoter1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter1@gmail.com", NormalizedUserName = "promoter1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAELMWDJAzD/6cU2xqO0S6kGqfITFWHNtM9VWEf0dSLzc2nkOUr1f5Uy2N2o2jxk13aQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter1@gmail.com" },
                        new { Id = new Guid("df9882d8-2cc3-48e5-898a-5735df64421f"), AccessFailedCount = 0, ConcurrencyStamp = "7d1bb7f9-a156-407f-9d10-c27c72a4f619", Email = "promoter2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter2@gmail.com", NormalizedUserName = "promoter2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEMl/soD3L5/2Ezp+La8ZGM1KbszGgodIFeS8deZCLS6FnQrX+c4nCaPL/sS38YabOw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter2@gmail.com" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExpectedNumberOfBachelorProposals");

                    b.Property<int>("ExpectedNumberOfMasterProposals");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Promoters");

                    b.HasData(
                        new { Id = new Guid("a242a7aa-bace-42e0-927f-2decf6c76dfa"), ExpectedNumberOfBachelorProposals = 3, ExpectedNumberOfMasterProposals = 4, FirstName = "Jan", LastName = "Kowalski", UserId = new Guid("55b1b2f4-9b5a-4cbe-8646-0eba7efe40bd") },
                        new { Id = new Guid("2bdd2074-e743-49b1-aef3-7d17b3690760"), ExpectedNumberOfBachelorProposals = 3, ExpectedNumberOfMasterProposals = 4, FirstName = "Jan", LastName = "Kowalski", UserId = new Guid("df9882d8-2cc3-48e5-898a-5735df64421f") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Level");

                    b.Property<int>("Mode");

                    b.Property<Guid>("PromoterId");

                    b.Property<int>("Status");

                    b.Property<string>("Topic")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PromoterId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ProposalId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new { Id = new Guid("e56264a8-64c0-4bf9-82a4-b13bfbff5dde"), UserId = new Guid("87b48860-66dc-45d6-bfad-4140f4783e52") },
                        new { Id = new Guid("4b80fdf9-78c5-46c2-ba2f-e903564d794b"), UserId = new Guid("948febcd-be78-4bc4-a15f-197cd253faa4") },
                        new { Id = new Guid("2c034bf4-a76d-4696-9209-7653b07f7bc4"), UserId = new Guid("00d328de-5529-4954-9cbd-dd568ffe830a") },
                        new { Id = new Guid("e1ca0726-fbf7-4137-947e-42e8e5d58013"), UserId = new Guid("4a22fdde-cb73-40e7-b25b-fbd712cea748") },
                        new { Id = new Guid("861c37f0-50fd-4112-9ccd-643b705e41f8"), UserId = new Guid("1e5b2a68-59e0-400b-b0a8-6204aa556be6") },
                        new { Id = new Guid("b2ba326b-574a-44fc-b7a0-dca578931c80"), UserId = new Guid("5614ff52-bfb7-463f-8445-9ae4c929c359") },
                        new { Id = new Guid("ac65fbfb-57cc-46bf-9b4e-49ddc5b4172a"), UserId = new Guid("f91a69b4-fc27-4390-8734-b13cb48dfad9") },
                        new { Id = new Guid("f3917674-4d63-493a-ba0e-f0b3e329d109"), UserId = new Guid("895246e1-b5fe-4980-afb4-07f9ff4f3a15") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.HasOne("Capri.Database.Entities.Promoter", "Promoter")
                        .WithMany("Proposals")
                        .HasForeignKey("PromoterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.HasOne("Capri.Database.Entities.Proposal")
                        .WithMany("Students")
                        .HasForeignKey("ProposalId");

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

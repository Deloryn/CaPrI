// <auto-generated />
using System;
using Capri.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capri.Database.Migrations
{
    [DbContext(typeof(CapriDbContext))]
    [Migration("20191228210431_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capri.Database.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FacultyId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Courses");

                    b.HasData(
                        new { Id = new Guid("203ef0aa-4e1a-418c-8fe1-abf7b294e270"), FacultyId = new Guid("4d92de45-7826-4b15-a057-bfdaf54d9266"), Name = "Architektura" },
                        new { Id = new Guid("6a12a146-acb9-49ca-b00e-ee4bf6c73269"), FacultyId = new Guid("4d92de45-7826-4b15-a057-bfdaf54d9266"), Name = "Architektura Wnętrz" },
                        new { Id = new Guid("d46bc62b-f805-45a4-92d7-b7906f8d0747"), FacultyId = new Guid("e6dc55d7-9760-4db1-9c0c-683ca9a8a1a6"), Name = "Budownictwo" },
                        new { Id = new Guid("ad99bc65-8419-4811-bc33-3aa2481d8b5d"), FacultyId = new Guid("e6dc55d7-9760-4db1-9c0c-683ca9a8a1a6"), Name = "Inżynieria Środowiska" },
                        new { Id = new Guid("709cae7c-448c-47f3-a71a-1f81f602a6b2"), FacultyId = new Guid("9a96e204-aa4a-4d1c-b7f9-d71f62b7cc43"), Name = "Inżynieria Biomedyczna" },
                        new { Id = new Guid("41abb32d-2149-45b2-a054-0ee00fce19ff"), FacultyId = new Guid("9a96e204-aa4a-4d1c-b7f9-d71f62b7cc43"), Name = "Inżynieria Materiałowa" },
                        new { Id = new Guid("e7b5c844-e581-4c76-9eae-45bb58de9b66"), FacultyId = new Guid("9a96e204-aa4a-4d1c-b7f9-d71f62b7cc43"), Name = "Mechanika i Budowa Maszyn" },
                        new { Id = new Guid("75460fd2-88c8-4314-b38c-ae0400d060bb"), FacultyId = new Guid("9a96e204-aa4a-4d1c-b7f9-d71f62b7cc43"), Name = "Mechatronika" },
                        new { Id = new Guid("de7dc0ff-9cd1-45fe-bce6-3e2768c61c78"), FacultyId = new Guid("9a96e204-aa4a-4d1c-b7f9-d71f62b7cc43"), Name = "Zarządzanie i Inżynieria Produkcji" },
                        new { Id = new Guid("1e5ddb0f-1b14-44b8-80f0-7cf5c1860607"), FacultyId = new Guid("55232fba-5913-436b-8c50-492c941a2fc7"), Name = "Elektronika i Telekomunikacja" },
                        new { Id = new Guid("bb3e12e4-5356-4d20-8b66-19a277cd999b"), FacultyId = new Guid("55232fba-5913-436b-8c50-492c941a2fc7"), Name = "Teleinformatyka" },
                        new { Id = new Guid("04dccfb0-022b-4f2a-a890-1e6c12401d2a"), FacultyId = new Guid("6faa0c55-aa3a-4a13-872a-47285b8e5820"), Name = "Automatyka i Robotyka" },
                        new { Id = new Guid("ed3b5cd7-017c-47ea-91bb-4cd26c1d5ac1"), FacultyId = new Guid("6faa0c55-aa3a-4a13-872a-47285b8e5820"), Name = "Elektrotechnika" },
                        new { Id = new Guid("9de08f19-19a6-4355-9ea5-9a3b23a210a3"), FacultyId = new Guid("6faa0c55-aa3a-4a13-872a-47285b8e5820"), Name = "Energetyka" },
                        new { Id = new Guid("3b4fe87f-8ec1-4bb8-8cfb-22f56957e325"), FacultyId = new Guid("6faa0c55-aa3a-4a13-872a-47285b8e5820"), Name = "Matematyka w Technice" },
                        new { Id = new Guid("b1399990-c893-4952-942e-acc20f6e4c41"), FacultyId = new Guid("dd726095-5968-4bbb-8236-bf2383502614"), Name = "Edukacja Techniczno-Informatyczna" },
                        new { Id = new Guid("5c02298f-afa4-461e-b623-4a90a91a8428"), FacultyId = new Guid("dd726095-5968-4bbb-8236-bf2383502614"), Name = "Fizyka Techniczna" },
                        new { Id = new Guid("0bd7b838-66ec-4a31-afb6-bcb3e7d92343"), FacultyId = new Guid("9c97a026-605b-4867-a496-8db746941c1c"), Name = "Informatyka" },
                        new { Id = new Guid("2d8be24b-8c82-45b2-b227-dd99910ef9a3"), FacultyId = new Guid("9c97a026-605b-4867-a496-8db746941c1c"), Name = "Bioinformatyka" },
                        new { Id = new Guid("67e5586a-bb73-4511-83ac-096474492d7e"), FacultyId = new Guid("9c97a026-605b-4867-a496-8db746941c1c"), Name = "Sztuczna Inteligencja / Artificial Intelligence" },
                        new { Id = new Guid("35c7c46a-1b38-4b24-b3ca-24454f8958fe"), FacultyId = new Guid("136a1aef-d2f3-4982-b921-826486dbcc77"), Name = "Konstrukcja i Eksploatacja Środków Transportu" },
                        new { Id = new Guid("8c2becc3-4f79-435b-8145-3dabada35d99"), FacultyId = new Guid("136a1aef-d2f3-4982-b921-826486dbcc77"), Name = "Transport" },
                        new { Id = new Guid("ff6b4615-2fb0-461d-97bf-b1640798a6f3"), FacultyId = new Guid("136a1aef-d2f3-4982-b921-826486dbcc77"), Name = "Lotnictwo i Kosmonautyka" },
                        new { Id = new Guid("5bc72034-9930-4b66-9894-0ee9d1092673"), FacultyId = new Guid("503a5f3e-96a8-4ed3-bc0c-8b9f0d576ecf"), Name = "Logistyka" },
                        new { Id = new Guid("2a8b4ac1-aedf-49fd-adfa-8ccb0a10a64e"), FacultyId = new Guid("503a5f3e-96a8-4ed3-bc0c-8b9f0d576ecf"), Name = "Inżynieria Zarządzania" },
                        new { Id = new Guid("2a7e3b2d-458f-486c-b193-79f5f1b18620"), FacultyId = new Guid("503a5f3e-96a8-4ed3-bc0c-8b9f0d576ecf"), Name = "Inżynieria Bezpieczeństwa" },
                        new { Id = new Guid("c67ef2a5-e584-4a47-bb6c-5089d741c1d3"), FacultyId = new Guid("53bd1bd4-9030-408f-86e7-48fced5240b7"), Name = "Inżynieria Chemiczna i Procesowa" },
                        new { Id = new Guid("3508fe9e-5a49-4180-9bc6-b9f604570795"), FacultyId = new Guid("53bd1bd4-9030-408f-86e7-48fced5240b7"), Name = "Technologia Chemiczna / Chemical Technology" },
                        new { Id = new Guid("a300a83b-7020-4d2c-962a-28a20a207043"), FacultyId = new Guid("53bd1bd4-9030-408f-86e7-48fced5240b7"), Name = "Technologie Ochrony Środowiska" },
                        new { Id = new Guid("eb5d1a64-8f4a-4557-8d4a-3a31d88b8a41"), FacultyId = new Guid("53bd1bd4-9030-408f-86e7-48fced5240b7"), Name = "Inżynieria Farmaceutyczna" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Faculties");

                    b.HasData(
                        new { Id = new Guid("4d92de45-7826-4b15-a057-bfdaf54d9266"), Name = "Wydział Architektury" },
                        new { Id = new Guid("e6dc55d7-9760-4db1-9c0c-683ca9a8a1a6"), Name = "Wydział Budownictwa i Inżynierii Środowiska" },
                        new { Id = new Guid("9a96e204-aa4a-4d1c-b7f9-d71f62b7cc43"), Name = "Wydział Budowy Maszyn i Zarządzania" },
                        new { Id = new Guid("55232fba-5913-436b-8c50-492c941a2fc7"), Name = "Wydział Elektroniki i Telekomunikacji" },
                        new { Id = new Guid("6faa0c55-aa3a-4a13-872a-47285b8e5820"), Name = "Wydział Elektryczny" },
                        new { Id = new Guid("dd726095-5968-4bbb-8236-bf2383502614"), Name = "Wydział Fizyki Technicznej" },
                        new { Id = new Guid("9c97a026-605b-4867-a496-8db746941c1c"), Name = "Wydział Informatyki" },
                        new { Id = new Guid("136a1aef-d2f3-4982-b921-826486dbcc77"), Name = "Wydział Inżynierii Transportu" },
                        new { Id = new Guid("503a5f3e-96a8-4ed3-bc0c-8b9f0d576ecf"), Name = "Wydział Inżynierii Zarządzania" },
                        new { Id = new Guid("53bd1bd4-9030-408f-86e7-48fced5240b7"), Name = "Wydział Technologii Chemicznej" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = new Guid("02c63674-4210-498a-9442-73e059bbed31"), ConcurrencyStamp = "287eadb5-5562-4aaf-bc4b-91960fb36b41", Name = "dean", NormalizedName = "dean" },
                        new { Id = new Guid("f3674215-0a0e-4170-8ab6-3695eefc735c"), ConcurrencyStamp = "22233ca9-2990-4413-bbe9-c01ed4307116", Name = "student", NormalizedName = "student" },
                        new { Id = new Guid("7334a38a-066c-4bcf-bba4-9232c08a62d1"), ConcurrencyStamp = "e91e9285-a396-4f1d-9a33-1c0c6d602c20", Name = "promoter", NormalizedName = "promoter" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { Id = new Guid("752a2ff8-6387-4081-9cb8-5076aadc9d05"), RoleId = new Guid("02c63674-4210-498a-9442-73e059bbed31"), UserId = new Guid("584eda9a-3bfe-44a9-b6ee-f9c894609872") },
                        new { Id = new Guid("68c581d2-09b7-406d-9a95-b1adcbc3eb57"), RoleId = new Guid("02c63674-4210-498a-9442-73e059bbed31"), UserId = new Guid("f9781e52-4db0-4734-a8dc-5b63074ffe04") },
                        new { Id = new Guid("0e2c0382-cdd2-4d2f-a06d-8f000df7bc31"), RoleId = new Guid("02c63674-4210-498a-9442-73e059bbed31"), UserId = new Guid("dd307629-0568-47c9-997c-832403d699b1") },
                        new { Id = new Guid("7f5cec01-d34f-4387-9412-4555c1b3b699"), RoleId = new Guid("02c63674-4210-498a-9442-73e059bbed31"), UserId = new Guid("52cfe1a9-3fd0-4a6c-bbdb-159a8ca2b528") },
                        new { Id = new Guid("c11a11ff-d014-4c9e-852a-91485e6c75e8"), RoleId = new Guid("f3674215-0a0e-4170-8ab6-3695eefc735c"), UserId = new Guid("a758608b-40c1-4c0e-b434-e57b21735456") },
                        new { Id = new Guid("d0b1f80b-a665-4a10-8c70-012ad20f0a72"), RoleId = new Guid("f3674215-0a0e-4170-8ab6-3695eefc735c"), UserId = new Guid("1e18a714-667d-44e0-93fa-cfed150f4e20") },
                        new { Id = new Guid("fe4931fa-e8dc-4e8e-9d1d-f61ca60f61af"), RoleId = new Guid("f3674215-0a0e-4170-8ab6-3695eefc735c"), UserId = new Guid("85c31dc7-5bd0-4935-a757-1a4880cbb5ce") },
                        new { Id = new Guid("73db9cc8-cad4-4b02-85f0-40df9aba008a"), RoleId = new Guid("f3674215-0a0e-4170-8ab6-3695eefc735c"), UserId = new Guid("f9417561-3213-488e-a11a-8f6d9260f156") },
                        new { Id = new Guid("6df4b062-d86f-4f17-b276-e655416c0dbf"), RoleId = new Guid("7334a38a-066c-4bcf-bba4-9232c08a62d1"), UserId = new Guid("0cf73f9f-5ec7-41a6-99cc-7558fdaeafde") },
                        new { Id = new Guid("af202734-46dd-44e7-bfe4-3821b0b660ec"), RoleId = new Guid("7334a38a-066c-4bcf-bba4-9232c08a62d1"), UserId = new Guid("0b33b1f0-183a-481e-a55e-1736ea13fa34") },
                        new { Id = new Guid("28d6ef44-8463-45eb-8308-36e7bf7d861f"), RoleId = new Guid("7334a38a-066c-4bcf-bba4-9232c08a62d1"), UserId = new Guid("656ec475-6024-4445-a4dc-1216193ec4db") },
                        new { Id = new Guid("5e183d79-df38-4605-91f1-3919772e72c2"), RoleId = new Guid("7334a38a-066c-4bcf-bba4-9232c08a62d1"), UserId = new Guid("8f439966-de35-4789-a724-7f590da4c172") },
                        new { Id = new Guid("86e2ab4f-7f21-4954-8a55-770ab2870c0c"), RoleId = new Guid("7334a38a-066c-4bcf-bba4-9232c08a62d1"), UserId = new Guid("3a71cb95-cb31-416d-839d-872a39090936") },
                        new { Id = new Guid("6c0d833f-1d77-4cae-99d8-4382ea74875c"), RoleId = new Guid("7334a38a-066c-4bcf-bba4-9232c08a62d1"), UserId = new Guid("83ec2cca-56aa-4e27-a5a3-c4e83a0a413a") },
                        new { Id = new Guid("a5b4ab14-6c8e-4b59-9f13-e01edf51754b"), RoleId = new Guid("7334a38a-066c-4bcf-bba4-9232c08a62d1"), UserId = new Guid("859f57a9-e875-410f-bea3-b51113831bef") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<Guid>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = new Guid("584eda9a-3bfe-44a9-b6ee-f9c894609872"), AccessFailedCount = 0, ConcurrencyStamp = "f1f5b145-a8d7-465c-8f6f-4f3fe38ef971", Email = "dean1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN1@GMAIL.COM", NormalizedUserName = "DEAN1@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAECMdJn9xMVuQrHvyt1OAjxQAdKioWyRgE8RM3bfYOaStcJcaunbvlH5rTCzygUGuww==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean1@gmail.com" },
                        new { Id = new Guid("f9781e52-4db0-4734-a8dc-5b63074ffe04"), AccessFailedCount = 0, ConcurrencyStamp = "915b35cb-7247-4d48-9070-c66bb66d9495", Email = "dean2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN2@GMAIL.COM", NormalizedUserName = "DEAN2@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEN8uFrWrWfAOFbM5acdluAko0okrZSJQSH3fAV2lKbI5zh05zZesduUSqXHf7MCR8g==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean2@gmail.com" },
                        new { Id = new Guid("dd307629-0568-47c9-997c-832403d699b1"), AccessFailedCount = 0, ConcurrencyStamp = "b77c7f69-4b42-45e9-a4a3-ac2e6822f950", Email = "dean3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN3@GMAIL.COM", NormalizedUserName = "DEAN3@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAENeXz+DQu6hXVgwzLycYuN+a9K37ewOf+gY8L4D/gsHOKHgBkqHu+ALqvtIIH+tgNg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean3@gmail.com" },
                        new { Id = new Guid("52cfe1a9-3fd0-4a6c-bbdb-159a8ca2b528"), AccessFailedCount = 0, ConcurrencyStamp = "1b58d4a1-71c7-4eee-a6fb-d3283eb01e3c", Email = "dean4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN4@GMAIL.COM", NormalizedUserName = "DEAN4@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEEjnNzgsR8HK+EO2+5c6MXv9MPqXoZ+euMbLXsMmq+CyT43lL0RvMGtYkPaVS8RpKw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean4@gmail.com" },
                        new { Id = new Guid("a758608b-40c1-4c0e-b434-e57b21735456"), AccessFailedCount = 0, ConcurrencyStamp = "cc97e850-7c69-4bcb-8b84-b265fbd787e7", Email = "student1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT1@GMAIL.COM", NormalizedUserName = "STUDENT1@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEJPEhMv4sVn0Ci/BxcjeuHtHSpXxYEpUw7KkiNsAr5c1JmxpwWOlJrme8Hq/+/icpw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student1@gmail.com" },
                        new { Id = new Guid("1e18a714-667d-44e0-93fa-cfed150f4e20"), AccessFailedCount = 0, ConcurrencyStamp = "f0a845e5-b928-4ad0-be33-0cad3224a318", Email = "student2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT2@GMAIL.COM", NormalizedUserName = "STUDENT2@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEMKKMWymQiDDe1j0m5o/wkO5wAsokwQYjRzQxQ9hxlka5G0PZNb4Eixk/oeQJNov8Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student2@gmail.com" },
                        new { Id = new Guid("85c31dc7-5bd0-4935-a757-1a4880cbb5ce"), AccessFailedCount = 0, ConcurrencyStamp = "384504d3-9c6a-407c-91c7-4f9afdb7c212", Email = "student3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT3@GMAIL.COM", NormalizedUserName = "STUDENT3@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEEh6NyxCMVhRNjpZANuYmwga8J74sMiJMDWTOJ7Ypq2AfX5Tm1y0idXMLAKFUOV07g==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student3@gmail.com" },
                        new { Id = new Guid("f9417561-3213-488e-a11a-8f6d9260f156"), AccessFailedCount = 0, ConcurrencyStamp = "75cce663-87d3-4c0c-b534-2a02f4568bff", Email = "student4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT4@GMAIL.COM", NormalizedUserName = "STUDENT4@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAELAwmsUQgHQOpNLSEuy+gf7oazuWNV8XMW2P2edaS7paphd4dGn2WFhkwHdxcXpoaw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student4@gmail.com" },
                        new { Id = new Guid("0cf73f9f-5ec7-41a6-99cc-7558fdaeafde"), AccessFailedCount = 0, ConcurrencyStamp = "36d6a84f-65d3-46a6-b8fa-0363a158e309", Email = "irmina.maslowska@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "IRMINA.MASLOWSKA@PUT.POZNAN.PL", NormalizedUserName = "IRMINA.MASLOWSKA@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEM4ScB0Oj0sSHPeQqsgKLxZSg4v+rS927W805sqxP9TUfpz+KnfovZkZQDQZeh7PQw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "irmina.maslowska@put.poznan.pl" },
                        new { Id = new Guid("0b33b1f0-183a-481e-a55e-1736ea13fa34"), AccessFailedCount = 0, ConcurrencyStamp = "b8acebae-93b4-46bb-8e1f-a8c5636c497d", Email = "bartlomiej.predki@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "BARTLOMIEJ.PREDKI@PUT.POZNAN.PL", NormalizedUserName = "BARTLOMIEJ.PREDKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAENbTMITiYBvXTVQKBrGH297adHBE06sHq5bq2FPE8WTE/sOUXvDMd0BA6fxvjDtnyA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "bartlomiej.predki@put.poznan.pl" },
                        new { Id = new Guid("656ec475-6024-4445-a4dc-1216193ec4db"), AccessFailedCount = 0, ConcurrencyStamp = "aef40123-14a7-4733-86c5-f60c97b7f51d", Email = "milosz.kadzinski@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "MILOSZ.KADZINSKI@PUT.POZNAN.PL", NormalizedUserName = "MILOSZ.KADZINSKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEFP23x/zC+txZeHuhrJ9/EbIhOBBo9NraeWkMJhNGv7SfUi35DBsmi+NPROGA8p8dQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "milosz.kadzinski@put.poznan.pl" },
                        new { Id = new Guid("8f439966-de35-4789-a724-7f590da4c172"), AccessFailedCount = 0, ConcurrencyStamp = "a532f10d-e018-4fe3-89fc-2ee58fb707f4", Email = "wojciech.kotlowski@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "WOJCIECH.KOTLOWSKI@PUT.POZNAN.PL", NormalizedUserName = "WOJCIECH.KOTLOWSKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEGL+hnbiIbITSa9aiZ0BCZudg/4HI5UyDT8IgFDJWJXvkIB1Jo+PERdrV3MUvI4zQQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "wojciech.kotlowski@put.poznan.pl" },
                        new { Id = new Guid("3a71cb95-cb31-416d-839d-872a39090936"), AccessFailedCount = 0, ConcurrencyStamp = "66023dc8-44a1-41f5-a581-9f74bf32d22a", Email = "jerzy.nawrocki@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "JERZY.NAWROCKI@PUT.POZNAN.PL", NormalizedUserName = "JERZY.NAWROCKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEE/ZJkP4BSEoPITe07+EKHhPYWoXKpqvtcpNYl9OipHgzVn7LQ6wG11F5xP5ytpiRw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "jerzy.nawrocki@put.poznan.pl" },
                        new { Id = new Guid("83ec2cca-56aa-4e27-a5a3-c4e83a0a413a"), AccessFailedCount = 0, ConcurrencyStamp = "e1c792ac-681b-4000-8ea4-c88c0759ac5c", Email = "katarzyna.adamska@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "KATARZYNA.ADAMSKA@PUT.POZNAN.PL", NormalizedUserName = "KATARZYNA.ADAMSKA@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEMnjmZIhXdu7v6OkDmVIokK0mAmqEIC5df6ZUsxSAdYC3O2p8aA00jA2hhUrmWdoWg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "katarzyna.adamska@put.poznan.pl" },
                        new { Id = new Guid("859f57a9-e875-410f-bea3-b51113831bef"), AccessFailedCount = 0, ConcurrencyStamp = "83f70bd4-d1a0-42df-8bae-c45fd4c19f82", Email = "krzysztof.alejski@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "KRZYSZTOF.ALEJSKI@PUT.POZNAN.PL", NormalizedUserName = "KRZYSZTOF.ALEJSKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEDFM2rWN+cHzRjeJxKSfVMlADa4X2CR1AXCagbUvYGc1fbmbm4VCWKOBypakOK2t3w==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "krzysztof.alejski@put.poznan.pl" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Institute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Institutes");

                    b.HasData(
                        new { Id = new Guid("6f4619e2-bebe-4782-9806-23bdcd79ce13"), Name = "Instytut Informatyki" },
                        new { Id = new Guid("742edf48-48bd-495e-a732-54f617707290"), Name = "Instytut Technologii Mechanicznej" },
                        new { Id = new Guid("c4365013-b1a7-467e-a5ad-d4db65c8e618"), Name = "Instytut Matematyki" },
                        new { Id = new Guid("81adffe5-e185-4f28-bf0f-a1dabbe644fb"), Name = "Instytut Technologii Materiałów" },
                        new { Id = new Guid("fa18de74-56df-49ee-954b-2f65dd506138"), Name = "Instytut Inżynierii Lądowej" },
                        new { Id = new Guid("a4503425-0c14-4c64-baa6-b21ddc232050"), Name = "Instytut Inżynierii Środowiska" },
                        new { Id = new Guid("240704d2-4352-45af-9077-50af176e6e97"), Name = "Instytut Chemii i Elektrochemii Technicznej" },
                        new { Id = new Guid("192c1c49-2439-40d1-9d42-9394c7f38fd0"), Name = "Instytut Elektrotechniki i Elektroniki Przemysłowej" },
                        new { Id = new Guid("0a0c8f22-58c1-40a6-bdf3-60779e6b2730"), Name = "Instytut Mechaniki Stosowanej" },
                        new { Id = new Guid("ac70734c-3e05-4991-8ed2-24204f7bf8f3"), Name = "Instytut Technologii i Inżynierii Chemicznej" },
                        new { Id = new Guid("4bbd9c37-f38e-4e1a-a6d6-d69943e9b291"), Name = "Instytut Architektury i Planowania Przestrzennego" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExpectedNumberOfBachelorProposals");

                    b.Property<int>("ExpectedNumberOfMasterProposals");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<Guid>("InstituteId");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("TitlePostfix");

                    b.Property<string>("TitlePrefix")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.HasIndex("UserId");

                    b.ToTable("Promoters");

                    b.HasData(
                        new { Id = new Guid("2a21d8e5-575a-41d9-99ed-fbb5c06a3db9"), ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Irmina", InstituteId = new Guid("6f4619e2-bebe-4782-9806-23bdcd79ce13"), LastName = "Masłowska", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = new Guid("0cf73f9f-5ec7-41a6-99cc-7558fdaeafde") },
                        new { Id = new Guid("d979fc9c-94d3-419a-a4e9-014e5664b73c"), ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Bartłomiej", InstituteId = new Guid("6f4619e2-bebe-4782-9806-23bdcd79ce13"), LastName = "Prędki", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = new Guid("0b33b1f0-183a-481e-a55e-1736ea13fa34") },
                        new { Id = new Guid("4ae4e691-dcff-4236-94ca-c97c102bc66c"), ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Miłosz", InstituteId = new Guid("6f4619e2-bebe-4782-9806-23bdcd79ce13"), LastName = "Kadziński", TitlePostfix = "", TitlePrefix = "dr hab. inż.", UserId = new Guid("656ec475-6024-4445-a4dc-1216193ec4db") },
                        new { Id = new Guid("9aabdabd-8d1b-4c38-a2d0-0f88dca17533"), ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Wojciech", InstituteId = new Guid("6f4619e2-bebe-4782-9806-23bdcd79ce13"), LastName = "Kotłowski", TitlePostfix = "", TitlePrefix = "dr hab. inż.", UserId = new Guid("8f439966-de35-4789-a724-7f590da4c172") },
                        new { Id = new Guid("48aea09b-4be3-4372-88bc-d46d78a1552b"), ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Jerzy", InstituteId = new Guid("6f4619e2-bebe-4782-9806-23bdcd79ce13"), LastName = "Nawrocki", TitlePostfix = "prof. PP", TitlePrefix = "dr hab inż.", UserId = new Guid("3a71cb95-cb31-416d-839d-872a39090936") },
                        new { Id = new Guid("fb23704f-cec8-48fb-aa79-f3bd0e7e293b"), ExpectedNumberOfBachelorProposals = 1, ExpectedNumberOfMasterProposals = 1, FirstName = "Katarzyna", InstituteId = new Guid("ac70734c-3e05-4991-8ed2-24204f7bf8f3"), LastName = "Adamska", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = new Guid("83ec2cca-56aa-4e27-a5a3-c4e83a0a413a") },
                        new { Id = new Guid("7345a41b-36aa-4ae2-b0fe-b7bb4279603b"), ExpectedNumberOfBachelorProposals = 3, ExpectedNumberOfMasterProposals = 2, FirstName = "Krzysztof", InstituteId = new Guid("ac70734c-3e05-4991-8ed2-24204f7bf8f3"), LastName = "Alejski", TitlePostfix = "prof. PP", TitlePrefix = "dr hab. inż.", UserId = new Guid("859f57a9-e875-410f-bea3-b51113831bef") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Level");

                    b.Property<int>("Mode");

                    b.Property<string>("OutputData");

                    b.Property<Guid>("PromoterId");

                    b.Property<string>("Specialization");

                    b.Property<DateTime>("StartingDate");

                    b.Property<int>("Status");

                    b.Property<int>("StudyProfile");

                    b.Property<string>("TopicEnglish")
                        .IsRequired();

                    b.Property<string>("TopicPolish")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PromoterId");

                    b.ToTable("Proposals");

                    b.HasData(
                        new { Id = new Guid("1763e12b-1eed-40c0-8032-9345ba3df408"), CourseId = new Guid("0bd7b838-66ec-4a31-afb6-bcb3e7d92343"), Description = "Opis.....", Level = 0, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("48aea09b-4be3-4372-88bc-d46d78a1552b"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Capri 2 - system for managing diploma topic cards", TopicPolish = "Capri 2 - system do zarządzania kartami tematów prac dyplomowych" },
                        new { Id = new Guid("cb2ab5c3-3d9d-4c85-afa4-a365bcbdcec4"), CourseId = new Guid("0bd7b838-66ec-4a31-afb6-bcb3e7d92343"), Description = "Celem pracy jest zaimplementowanie metod Electre 1s i Electre TRI jako aplikacji desktopowych.....", Level = 0, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("2a21d8e5-575a-41d9-99ed-fbb5c06a3db9"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Implementation of chosen methods from Electre family", TopicPolish = "Implementacja wybranych metod z rodziny Electre" },
                        new { Id = new Guid("8236e6ea-60be-41fe-a8fb-9f8a8bd1c469"), CourseId = new Guid("0bd7b838-66ec-4a31-afb6-bcb3e7d92343"), Description = "Opis.....", Level = 0, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("d979fc9c-94d3-419a-a4e9-014e5664b73c"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Implementation of decision support methods based on utility function (UTA, Assess)", TopicPolish = "Implementacja metod wspomagania decyzji opartych na funkcji użyteczności (UTA, Assess)" },
                        new { Id = new Guid("c3bd3d42-74ea-478d-b86f-6fefb93d7eae"), CourseId = new Guid("0bd7b838-66ec-4a31-afb6-bcb3e7d92343"), Description = "Opis.....", Level = 0, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("4ae4e691-dcff-4236-94ca-c97c102bc66c"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Extension of diviz platform", TopicPolish = "Rozszerzenie platformy diviz o metody wielokryterialnego wspomagania decyzji oparte na różnych modelach preferencji" },
                        new { Id = new Guid("6aff8987-5f3f-46aa-a8ed-afbf6fbe969f"), CourseId = new Guid("0bd7b838-66ec-4a31-afb6-bcb3e7d92343"), Description = "Opis.....", Level = 0, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("9aabdabd-8d1b-4c38-a2d0-0f88dca17533"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Style transfering using a neural network", TopicPolish = "Transfer stylu przy użyciu sieci neuronowej" },
                        new { Id = new Guid("ffdadd8b-743c-4259-bb30-9e1dd34bf5df"), CourseId = new Guid("c67ef2a5-e584-4a47-bb6c-5089d741c1d3"), Description = "Praca będzie polegać na własnoręcznym upakowaniu kolumny chromatograficznej, doborze odpowiednich warunków pomiaru w celu wyznaczenia podstawowych parametrów dla niestandardowych kolumn do HPLC.", Level = 0, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("fb23704f-cec8-48fb-aa79-f3bd0e7e293b"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "No title", TopicPolish = "Wyznaczenie parametrów kolumny chromatograficznej za pomocą odwróconej chromatografii cieczowej" },
                        new { Id = new Guid("00a440be-ccc9-4978-83bd-9899aa438bf9"), CourseId = new Guid("c67ef2a5-e584-4a47-bb6c-5089d741c1d3"), Description = "Brak opisu", Level = 1, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("7345a41b-36aa-4ae2-b0fe-b7bb4279603b"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "No title", TopicPolish = "Analiza i projektowanie procesów wydzielania produktów otrzymywanych w procesie biokonwersji surowców odnawialnych" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ProposalId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new { Id = new Guid("825f3a41-b3c7-4956-a370-96815d8c731a"), UserId = new Guid("a758608b-40c1-4c0e-b434-e57b21735456") },
                        new { Id = new Guid("6c0b784d-dc91-4873-b81e-c6b855b4a2a0"), UserId = new Guid("1e18a714-667d-44e0-93fa-cfed150f4e20") },
                        new { Id = new Guid("c20f2495-8513-44b8-8dd6-5ed4da38bead"), UserId = new Guid("85c31dc7-5bd0-4935-a757-1a4880cbb5ce") },
                        new { Id = new Guid("86915a9d-3111-4a7e-b405-1380da7dae64"), UserId = new Guid("f9417561-3213-488e-a11a-8f6d9260f156") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Course", b =>
                {
                    b.HasOne("Capri.Database.Entities.Faculty", "Faculty")
                        .WithMany("Courses")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.HasOne("Capri.Database.Entities.Institute", "Institute")
                        .WithMany("Promoters")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.HasOne("Capri.Database.Entities.Course", "Course")
                        .WithMany("Proposals")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Capri.Database.Entities.Promoter", "Promoter")
                        .WithMany("Proposals")
                        .HasForeignKey("PromoterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.HasOne("Capri.Database.Entities.Proposal")
                        .WithMany("Students")
                        .HasForeignKey("ProposalId");

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

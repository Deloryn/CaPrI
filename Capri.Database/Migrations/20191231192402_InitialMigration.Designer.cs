// <auto-generated />
using System;
using Capri.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capri.Database.Migrations
{
    [DbContext(typeof(CapriDbContext))]
    [Migration("20191231192402_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capri.Database.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FacultyId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Courses");

                    b.HasData(
                        new { Id = new Guid("1c46ad84-d2fb-432a-97e3-1e4f1a43a8c2"), FacultyId = new Guid("7938a0b8-3bdf-488f-974d-1f7420f6ec84"), Name = "Architektura" },
                        new { Id = new Guid("95c30f34-0c00-4641-bf6f-3ceb5433f549"), FacultyId = new Guid("7938a0b8-3bdf-488f-974d-1f7420f6ec84"), Name = "Architektura Wnętrz" },
                        new { Id = new Guid("f0c44b9a-c8bf-4a8d-bc37-d8cb971fe333"), FacultyId = new Guid("f8c69bc8-ff1f-480c-8481-feff7d081893"), Name = "Budownictwo" },
                        new { Id = new Guid("ba7963d2-50da-40c0-b631-03af9cd7ee39"), FacultyId = new Guid("f8c69bc8-ff1f-480c-8481-feff7d081893"), Name = "Inżynieria Środowiska" },
                        new { Id = new Guid("51fc51a5-c0e8-4e86-b082-3594dcf54e34"), FacultyId = new Guid("358c6f7d-8609-4c7f-bde0-79a916422fcb"), Name = "Inżynieria Biomedyczna" },
                        new { Id = new Guid("326c5e20-f6eb-4377-a364-b1acaada7cc5"), FacultyId = new Guid("358c6f7d-8609-4c7f-bde0-79a916422fcb"), Name = "Inżynieria Materiałowa" },
                        new { Id = new Guid("d5a838ef-3215-466b-b501-ecb620d29c1c"), FacultyId = new Guid("358c6f7d-8609-4c7f-bde0-79a916422fcb"), Name = "Mechanika i Budowa Maszyn" },
                        new { Id = new Guid("17c8c553-9c5a-4096-aa9a-f22d2065b8d5"), FacultyId = new Guid("358c6f7d-8609-4c7f-bde0-79a916422fcb"), Name = "Mechatronika" },
                        new { Id = new Guid("6f105593-aa5a-4e77-b683-c051d44fda20"), FacultyId = new Guid("358c6f7d-8609-4c7f-bde0-79a916422fcb"), Name = "Zarządzanie i Inżynieria Produkcji" },
                        new { Id = new Guid("a8ea5085-57bb-47da-92ae-258083691737"), FacultyId = new Guid("2be3b2e7-90e3-464d-b886-6fe81981bf34"), Name = "Elektronika i Telekomunikacja" },
                        new { Id = new Guid("a66bbba9-5f13-4432-a808-942ba934bd02"), FacultyId = new Guid("2be3b2e7-90e3-464d-b886-6fe81981bf34"), Name = "Teleinformatyka" },
                        new { Id = new Guid("416091ac-c0e7-4b59-88d0-a9e8ac6715e1"), FacultyId = new Guid("649e24b3-658e-4f92-812f-76ae36dbc7ba"), Name = "Automatyka i Robotyka" },
                        new { Id = new Guid("19c142ff-7961-4404-a279-74cc89cd2120"), FacultyId = new Guid("649e24b3-658e-4f92-812f-76ae36dbc7ba"), Name = "Elektrotechnika" },
                        new { Id = new Guid("111a1029-4cef-4ff6-b823-6279075d22ae"), FacultyId = new Guid("649e24b3-658e-4f92-812f-76ae36dbc7ba"), Name = "Energetyka" },
                        new { Id = new Guid("a4a29fde-5376-4251-aeb7-de5a70365f1c"), FacultyId = new Guid("649e24b3-658e-4f92-812f-76ae36dbc7ba"), Name = "Matematyka w Technice" },
                        new { Id = new Guid("2c2ee488-639c-4b8d-8efe-ec979c1d2319"), FacultyId = new Guid("1eaebd3a-3e9b-4123-b145-5ff452c549f8"), Name = "Edukacja Techniczno-Informatyczna" },
                        new { Id = new Guid("73270900-7890-47e0-bb27-2119265cc8f3"), FacultyId = new Guid("1eaebd3a-3e9b-4123-b145-5ff452c549f8"), Name = "Fizyka Techniczna" },
                        new { Id = new Guid("a3fcb965-2e4e-4a8f-9ad4-34098881f9cc"), FacultyId = new Guid("fd427a28-b3fb-4800-922e-22eff30c15ad"), Name = "Informatyka" },
                        new { Id = new Guid("3c683c58-16fb-4067-9e52-02d483741022"), FacultyId = new Guid("fd427a28-b3fb-4800-922e-22eff30c15ad"), Name = "Bioinformatyka" },
                        new { Id = new Guid("563c8950-7942-48c1-aa1f-b3d278c47b20"), FacultyId = new Guid("fd427a28-b3fb-4800-922e-22eff30c15ad"), Name = "Sztuczna Inteligencja / Artificial Intelligence" },
                        new { Id = new Guid("60f5fe71-bfea-4dc8-a4bc-3af66ab008f7"), FacultyId = new Guid("cbc8262c-09bb-4603-97ad-5b04d9087959"), Name = "Konstrukcja i Eksploatacja Środków Transportu" },
                        new { Id = new Guid("ff7d4ab7-a5c3-4152-bbb8-15502d6c89bd"), FacultyId = new Guid("cbc8262c-09bb-4603-97ad-5b04d9087959"), Name = "Transport" },
                        new { Id = new Guid("ca81fd16-1559-495d-9d85-6f2292716de9"), FacultyId = new Guid("cbc8262c-09bb-4603-97ad-5b04d9087959"), Name = "Lotnictwo i Kosmonautyka" },
                        new { Id = new Guid("9137ff55-72bf-464e-a5d0-b58c369cab39"), FacultyId = new Guid("35732b87-f9d6-4842-82c4-e75d7cf59245"), Name = "Logistyka" },
                        new { Id = new Guid("73969c22-c335-45f7-a27e-947ac34d01ef"), FacultyId = new Guid("35732b87-f9d6-4842-82c4-e75d7cf59245"), Name = "Inżynieria Zarządzania" },
                        new { Id = new Guid("305fbc16-81a2-4f5f-a1da-eec0dc43f516"), FacultyId = new Guid("35732b87-f9d6-4842-82c4-e75d7cf59245"), Name = "Inżynieria Bezpieczeństwa" },
                        new { Id = new Guid("7a3f2f4d-1eb1-43cf-8c50-9f52e3de4eb4"), FacultyId = new Guid("56084315-9fa7-4ff5-b2d3-942797ef7fbc"), Name = "Inżynieria Chemiczna i Procesowa" },
                        new { Id = new Guid("dc710801-e404-4abb-ab9d-284c2a986812"), FacultyId = new Guid("56084315-9fa7-4ff5-b2d3-942797ef7fbc"), Name = "Technologia Chemiczna / Chemical Technology" },
                        new { Id = new Guid("5a183ae9-7f58-4408-b5bf-dcda9fa014b2"), FacultyId = new Guid("56084315-9fa7-4ff5-b2d3-942797ef7fbc"), Name = "Technologie Ochrony Środowiska" },
                        new { Id = new Guid("86a9e7d6-8305-4926-b92e-077d47078d99"), FacultyId = new Guid("56084315-9fa7-4ff5-b2d3-942797ef7fbc"), Name = "Inżynieria Farmaceutyczna" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Faculties");

                    b.HasData(
                        new { Id = new Guid("7938a0b8-3bdf-488f-974d-1f7420f6ec84"), Name = "Wydział Architektury" },
                        new { Id = new Guid("f8c69bc8-ff1f-480c-8481-feff7d081893"), Name = "Wydział Budownictwa i Inżynierii Środowiska" },
                        new { Id = new Guid("358c6f7d-8609-4c7f-bde0-79a916422fcb"), Name = "Wydział Budowy Maszyn i Zarządzania" },
                        new { Id = new Guid("2be3b2e7-90e3-464d-b886-6fe81981bf34"), Name = "Wydział Elektroniki i Telekomunikacji" },
                        new { Id = new Guid("649e24b3-658e-4f92-812f-76ae36dbc7ba"), Name = "Wydział Elektryczny" },
                        new { Id = new Guid("1eaebd3a-3e9b-4123-b145-5ff452c549f8"), Name = "Wydział Fizyki Technicznej" },
                        new { Id = new Guid("fd427a28-b3fb-4800-922e-22eff30c15ad"), Name = "Wydział Informatyki" },
                        new { Id = new Guid("cbc8262c-09bb-4603-97ad-5b04d9087959"), Name = "Wydział Inżynierii Transportu" },
                        new { Id = new Guid("35732b87-f9d6-4842-82c4-e75d7cf59245"), Name = "Wydział Inżynierii Zarządzania" },
                        new { Id = new Guid("56084315-9fa7-4ff5-b2d3-942797ef7fbc"), Name = "Wydział Technologii Chemicznej" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = new Guid("300d9d53-c3a0-4e5f-811c-d2e14c577075"), ConcurrencyStamp = "ef0914d9-c3ce-49b8-96e9-6daeb0ce6797", Name = "dean", NormalizedName = "dean" },
                        new { Id = new Guid("d4e24916-a640-47d2-99f5-43d2d399d94c"), ConcurrencyStamp = "9ca70ca6-0d95-440a-a2dc-949b64419357", Name = "student", NormalizedName = "student" },
                        new { Id = new Guid("10fac6b8-1a1f-4438-8d40-1810490d175d"), ConcurrencyStamp = "0832f754-7451-4689-9a09-73bf39a4ed03", Name = "promoter", NormalizedName = "promoter" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { Id = new Guid("d4e12e13-babd-487d-b787-780dd508cac8"), RoleId = new Guid("300d9d53-c3a0-4e5f-811c-d2e14c577075"), UserId = new Guid("02878cd2-f40f-401c-91ac-3c4acebd3c9e") },
                        new { Id = new Guid("8405d0ad-1eff-4698-bb41-29721df86e5f"), RoleId = new Guid("300d9d53-c3a0-4e5f-811c-d2e14c577075"), UserId = new Guid("c79319c5-ebe0-4fdd-9f00-58e38a441234") },
                        new { Id = new Guid("fa9e5267-b015-4a05-912a-35118638d162"), RoleId = new Guid("300d9d53-c3a0-4e5f-811c-d2e14c577075"), UserId = new Guid("57357705-a253-4160-98a0-18eae2783572") },
                        new { Id = new Guid("1e678f00-7a97-4a99-8df4-dedf5129d6ae"), RoleId = new Guid("300d9d53-c3a0-4e5f-811c-d2e14c577075"), UserId = new Guid("1eb94068-22b1-41cb-ac93-26c8328a2711") },
                        new { Id = new Guid("c36981eb-7636-4cef-9554-3b0b57a98a51"), RoleId = new Guid("d4e24916-a640-47d2-99f5-43d2d399d94c"), UserId = new Guid("4ed2b207-2a1d-4bfb-8bc3-3f74ddb094ad") },
                        new { Id = new Guid("22450dbc-d657-4d17-83d1-ed769a639f85"), RoleId = new Guid("d4e24916-a640-47d2-99f5-43d2d399d94c"), UserId = new Guid("fe253e28-e788-49c0-8fbe-91f27c8db205") },
                        new { Id = new Guid("95ab25af-e108-43af-8bab-2ef400696c4e"), RoleId = new Guid("d4e24916-a640-47d2-99f5-43d2d399d94c"), UserId = new Guid("fce31e52-c600-445b-9226-72f01cd5c60e") },
                        new { Id = new Guid("e644f011-bbe0-4e68-9c79-92a297d93a41"), RoleId = new Guid("d4e24916-a640-47d2-99f5-43d2d399d94c"), UserId = new Guid("72ff5f39-7435-4ae9-abbc-fe52677b8834") },
                        new { Id = new Guid("e79fd317-cb4c-4e4c-a57b-7f3a95605c90"), RoleId = new Guid("10fac6b8-1a1f-4438-8d40-1810490d175d"), UserId = new Guid("f6b9cce1-69ab-4a57-80f9-3ca1fd10bfb6") },
                        new { Id = new Guid("db3e291f-9e46-4933-bb6d-9a1f96d37acf"), RoleId = new Guid("10fac6b8-1a1f-4438-8d40-1810490d175d"), UserId = new Guid("e7118624-82ed-47bf-b92e-eaf3ae27174b") },
                        new { Id = new Guid("19682dda-0a0e-49f9-9bca-f96be35d1e78"), RoleId = new Guid("10fac6b8-1a1f-4438-8d40-1810490d175d"), UserId = new Guid("31b0c1a9-b34f-4f0b-90ee-006dedecbfd5") },
                        new { Id = new Guid("f21f9fec-5cbe-4dfc-a470-3aba90dbc9db"), RoleId = new Guid("10fac6b8-1a1f-4438-8d40-1810490d175d"), UserId = new Guid("e0b8f77e-f68a-467e-ba41-0d581c6e8069") },
                        new { Id = new Guid("3cbf4ac7-420d-4900-9a05-3a41c138990a"), RoleId = new Guid("10fac6b8-1a1f-4438-8d40-1810490d175d"), UserId = new Guid("33a1f462-bd15-4c7f-9794-4ad5f0eb9c6c") },
                        new { Id = new Guid("4c8bdee5-a664-46b8-af38-b82749243b61"), RoleId = new Guid("10fac6b8-1a1f-4438-8d40-1810490d175d"), UserId = new Guid("e88dd219-5c12-4e33-b4c5-1a31620fa8d4") },
                        new { Id = new Guid("48cd704c-83e2-4518-ad93-fb06a46ac82e"), RoleId = new Guid("10fac6b8-1a1f-4438-8d40-1810490d175d"), UserId = new Guid("75224243-82c3-4137-8926-12af9dbbb4ff") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<Guid>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = new Guid("02878cd2-f40f-401c-91ac-3c4acebd3c9e"), AccessFailedCount = 0, ConcurrencyStamp = "7042e2b9-fa43-49b2-bb5c-29519cb0e595", Email = "dean1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN1@GMAIL.COM", NormalizedUserName = "DEAN1@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEGAv2pbUdcsNvn6qkfQ9yshsDJr+gw/qXyCvKDzRHnKBPgMheyB1c89VBm2THGoh7A==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean1@gmail.com" },
                        new { Id = new Guid("c79319c5-ebe0-4fdd-9f00-58e38a441234"), AccessFailedCount = 0, ConcurrencyStamp = "eed50f26-df87-48e1-ac7a-83cd4ca8a03a", Email = "dean2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN2@GMAIL.COM", NormalizedUserName = "DEAN2@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEHgapmBDaRdRyHQLb+dhabVsrxpkHjtHFKlQsu47JD4THQfOVO8AYwII4d6ck9S+Lg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean2@gmail.com" },
                        new { Id = new Guid("57357705-a253-4160-98a0-18eae2783572"), AccessFailedCount = 0, ConcurrencyStamp = "6156d019-47b7-4aef-8480-76418c5a9e61", Email = "dean3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN3@GMAIL.COM", NormalizedUserName = "DEAN3@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAECXSMAX0mGFX7+R9mx7c8rHBjwyxFSGhC2SpXkiAI/peZR7LBlTjGc/f2FVAwBDKVQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean3@gmail.com" },
                        new { Id = new Guid("1eb94068-22b1-41cb-ac93-26c8328a2711"), AccessFailedCount = 0, ConcurrencyStamp = "b8c2c252-1983-4fdf-8285-e6dafbf9f7ca", Email = "dean4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN4@GMAIL.COM", NormalizedUserName = "DEAN4@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEAU0XJKGXvjSl2DkZxoLXHDVSDoWabKIw7zMY8yVEwBP5ZbfcVBuXqe1PhHZN33NNw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean4@gmail.com" },
                        new { Id = new Guid("4ed2b207-2a1d-4bfb-8bc3-3f74ddb094ad"), AccessFailedCount = 0, ConcurrencyStamp = "dccbdbed-ccb0-40e2-a055-e384a12ffcc0", Email = "student1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT1@GMAIL.COM", NormalizedUserName = "STUDENT1@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEJJOnnrd9qjp/jiCLpnZhkwvQ9fmhyeCyMlv3N4U3iu+d2IMbKX0mqdi7CNJaQxaYA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student1@gmail.com" },
                        new { Id = new Guid("fe253e28-e788-49c0-8fbe-91f27c8db205"), AccessFailedCount = 0, ConcurrencyStamp = "1f2114e4-2605-45c4-b93c-5ced8064d7b4", Email = "student2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT2@GMAIL.COM", NormalizedUserName = "STUDENT2@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEDBpafVZbxXJUvmfe/XwAZgQYKe7QOwnQiksP/IrjQNzIUWEqTTcARPxY2gg6+ULNQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student2@gmail.com" },
                        new { Id = new Guid("fce31e52-c600-445b-9226-72f01cd5c60e"), AccessFailedCount = 0, ConcurrencyStamp = "4cda74d8-fa7f-4751-8e32-a9fdec9e502a", Email = "student3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT3@GMAIL.COM", NormalizedUserName = "STUDENT3@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEFSdm47NQA5rhvhXrVK9a1g2rgcF6ToECgRKgT4VKH/wRemrzI5cp0gcA6u5se/8tQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student3@gmail.com" },
                        new { Id = new Guid("72ff5f39-7435-4ae9-abbc-fe52677b8834"), AccessFailedCount = 0, ConcurrencyStamp = "ab188fd9-6705-4597-a0df-19e1298225ff", Email = "student4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT4@GMAIL.COM", NormalizedUserName = "STUDENT4@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAENGVPutn1nX3ZqQClc67ocB2egCrx2zMS2/TCSdpzrYtgZJB0J0vIlNqJnoBG/TupA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student4@gmail.com" },
                        new { Id = new Guid("f6b9cce1-69ab-4a57-80f9-3ca1fd10bfb6"), AccessFailedCount = 0, ConcurrencyStamp = "2789eb45-dffc-44e5-ba81-b33c06b92d4d", Email = "irmina.maslowska@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "IRMINA.MASLOWSKA@PUT.POZNAN.PL", NormalizedUserName = "IRMINA.MASLOWSKA@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEAo5gM89zGhS9DqT7tYV8SHQad3orRdONHBX9OxmuVfDKd/Rxi8VH8Emukg2hnUWhQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "irmina.maslowska@put.poznan.pl" },
                        new { Id = new Guid("e7118624-82ed-47bf-b92e-eaf3ae27174b"), AccessFailedCount = 0, ConcurrencyStamp = "3047d284-2212-4373-9a4d-4ba1d8c2dbcf", Email = "bartlomiej.predki@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "BARTLOMIEJ.PREDKI@PUT.POZNAN.PL", NormalizedUserName = "BARTLOMIEJ.PREDKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEN4VtUnaSs8eHZo2M9Y9ZDwLib2myDpFmFOi1M8varf0Xx5OecnEYthODYFGYSncaQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "bartlomiej.predki@put.poznan.pl" },
                        new { Id = new Guid("31b0c1a9-b34f-4f0b-90ee-006dedecbfd5"), AccessFailedCount = 0, ConcurrencyStamp = "fcf2a260-648f-412e-9a59-8bb2c53b48ac", Email = "milosz.kadzinski@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "MILOSZ.KADZINSKI@PUT.POZNAN.PL", NormalizedUserName = "MILOSZ.KADZINSKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEFyzQ9fTY2k4X8HbZEYRiQhVUay4SqxYqzd9Xmn3J3wJFTHUpHe6sWoeNQMGlf2gwg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "milosz.kadzinski@put.poznan.pl" },
                        new { Id = new Guid("e0b8f77e-f68a-467e-ba41-0d581c6e8069"), AccessFailedCount = 0, ConcurrencyStamp = "10a68fa0-9152-4d3e-bfc3-0c6ca89bfa95", Email = "wojciech.kotlowski@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "WOJCIECH.KOTLOWSKI@PUT.POZNAN.PL", NormalizedUserName = "WOJCIECH.KOTLOWSKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEMnVLzZ/p6Vn09HRREy0AWn8EE30KUqH4qqOP9uLiinSZcq6E/vqsyRlj65oR1WXHA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "wojciech.kotlowski@put.poznan.pl" },
                        new { Id = new Guid("33a1f462-bd15-4c7f-9794-4ad5f0eb9c6c"), AccessFailedCount = 0, ConcurrencyStamp = "6d037985-2cd1-4323-9e90-95f42443e4ff", Email = "jerzy.nawrocki@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "JERZY.NAWROCKI@PUT.POZNAN.PL", NormalizedUserName = "JERZY.NAWROCKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEGnzWExzVZMw+DMRSA6BtCOu4HTUO7mnryI3bCRzNeQ+rl182v1BHRMv78mVNTPq1g==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "jerzy.nawrocki@put.poznan.pl" },
                        new { Id = new Guid("e88dd219-5c12-4e33-b4c5-1a31620fa8d4"), AccessFailedCount = 0, ConcurrencyStamp = "f9fc260f-fbf1-48f5-bac2-3507c3f4db17", Email = "katarzyna.adamska@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "KATARZYNA.ADAMSKA@PUT.POZNAN.PL", NormalizedUserName = "KATARZYNA.ADAMSKA@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEAVSMk7KPwQoMOCWlXxy9JEI7dOY20Hx/YcJab5hZyqa7HfFth7jL9rN44nXzvcUJA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "katarzyna.adamska@put.poznan.pl" },
                        new { Id = new Guid("75224243-82c3-4137-8926-12af9dbbb4ff"), AccessFailedCount = 0, ConcurrencyStamp = "680e9a91-be93-455a-8849-77d8e716ee55", Email = "krzysztof.alejski@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "KRZYSZTOF.ALEJSKI@PUT.POZNAN.PL", NormalizedUserName = "KRZYSZTOF.ALEJSKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEP/qXgGPG8msATrpz8m1i96O9lN9KYN3ILwi90/UF1nZMwIAj3WeRi5CmdlgrWV9yQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "krzysztof.alejski@put.poznan.pl" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Institute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Institutes");

                    b.HasData(
                        new { Id = new Guid("9f4e9162-cf0c-4cf5-bfa9-c383ffc0d1a6"), Name = "Instytut Informatyki" },
                        new { Id = new Guid("92862397-85fa-45b6-9124-05609a70561f"), Name = "Instytut Technologii Mechanicznej" },
                        new { Id = new Guid("42fc2fec-fcbc-4acf-b071-14545a38ec7f"), Name = "Instytut Matematyki" },
                        new { Id = new Guid("ff893bf5-156d-4c15-9843-f9ef919cfeba"), Name = "Instytut Technologii Materiałów" },
                        new { Id = new Guid("266a358a-9b33-40f9-a1e1-2cd5c9b30b46"), Name = "Instytut Inżynierii Lądowej" },
                        new { Id = new Guid("9ee19018-cf08-482e-8c9a-1fc5f33b75dd"), Name = "Instytut Inżynierii Środowiska" },
                        new { Id = new Guid("78d30756-498b-4fb3-8fdb-04b8d5bf6c6b"), Name = "Instytut Chemii i Elektrochemii Technicznej" },
                        new { Id = new Guid("858830b2-6f9c-477f-b500-e7f4f46faf4f"), Name = "Instytut Elektrotechniki i Elektroniki Przemysłowej" },
                        new { Id = new Guid("131dec9d-3818-4bec-a791-a957cbe1ebb9"), Name = "Instytut Mechaniki Stosowanej" },
                        new { Id = new Guid("2ef174a3-2a68-4dd0-b261-781720d68a86"), Name = "Instytut Technologii i Inżynierii Chemicznej" },
                        new { Id = new Guid("29aef52a-8428-4207-82d7-891a22e37262"), Name = "Instytut Architektury i Planowania Przestrzennego" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExpectedNumberOfBachelorProposals");

                    b.Property<int>("ExpectedNumberOfMasterProposals");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<Guid>("InstituteId");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("TitlePostfix");

                    b.Property<string>("TitlePrefix")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.HasIndex("UserId");

                    b.ToTable("Promoters");

                    b.HasData(
                        new { Id = new Guid("2a21d8e5-575a-41d9-99ed-fbb5c06a3db9"), ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Irmina", InstituteId = new Guid("9f4e9162-cf0c-4cf5-bfa9-c383ffc0d1a6"), LastName = "Masłowska", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = new Guid("f6b9cce1-69ab-4a57-80f9-3ca1fd10bfb6") },
                        new { Id = new Guid("d979fc9c-94d3-419a-a4e9-014e5664b73c"), ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Bartłomiej", InstituteId = new Guid("9f4e9162-cf0c-4cf5-bfa9-c383ffc0d1a6"), LastName = "Prędki", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = new Guid("e7118624-82ed-47bf-b92e-eaf3ae27174b") },
                        new { Id = new Guid("4ae4e691-dcff-4236-94ca-c97c102bc66c"), ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Miłosz", InstituteId = new Guid("9f4e9162-cf0c-4cf5-bfa9-c383ffc0d1a6"), LastName = "Kadziński", TitlePostfix = "", TitlePrefix = "dr hab. inż.", UserId = new Guid("31b0c1a9-b34f-4f0b-90ee-006dedecbfd5") },
                        new { Id = new Guid("9aabdabd-8d1b-4c38-a2d0-0f88dca17533"), ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Wojciech", InstituteId = new Guid("9f4e9162-cf0c-4cf5-bfa9-c383ffc0d1a6"), LastName = "Kotłowski", TitlePostfix = "", TitlePrefix = "dr hab. inż.", UserId = new Guid("e0b8f77e-f68a-467e-ba41-0d581c6e8069") },
                        new { Id = new Guid("48aea09b-4be3-4372-88bc-d46d78a1552b"), ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Jerzy", InstituteId = new Guid("9f4e9162-cf0c-4cf5-bfa9-c383ffc0d1a6"), LastName = "Nawrocki", TitlePostfix = "prof. PP", TitlePrefix = "dr hab inż.", UserId = new Guid("33a1f462-bd15-4c7f-9794-4ad5f0eb9c6c") },
                        new { Id = new Guid("fb23704f-cec8-48fb-aa79-f3bd0e7e293b"), ExpectedNumberOfBachelorProposals = 1, ExpectedNumberOfMasterProposals = 1, FirstName = "Katarzyna", InstituteId = new Guid("2ef174a3-2a68-4dd0-b261-781720d68a86"), LastName = "Adamska", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = new Guid("e88dd219-5c12-4e33-b4c5-1a31620fa8d4") },
                        new { Id = new Guid("7345a41b-36aa-4ae2-b0fe-b7bb4279603b"), ExpectedNumberOfBachelorProposals = 3, ExpectedNumberOfMasterProposals = 2, FirstName = "Krzysztof", InstituteId = new Guid("2ef174a3-2a68-4dd0-b261-781720d68a86"), LastName = "Alejski", TitlePostfix = "prof. PP", TitlePrefix = "dr hab. inż.", UserId = new Guid("75224243-82c3-4137-8926-12af9dbbb4ff") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Level");

                    b.Property<int>("MaxNumberOfStudents");

                    b.Property<int>("Mode");

                    b.Property<string>("OutputData");

                    b.Property<Guid>("PromoterId");

                    b.Property<string>("Specialization");

                    b.Property<DateTime>("StartingDate");

                    b.Property<int>("Status");

                    b.Property<int>("StudyProfile");

                    b.Property<string>("TopicEnglish")
                        .IsRequired();

                    b.Property<string>("TopicPolish")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PromoterId");

                    b.ToTable("Proposals");

                    b.HasData(
                        new { Id = new Guid("f79c11c6-3a14-47ec-84a7-7df8381300ca"), CourseId = new Guid("a3fcb965-2e4e-4a8f-9ad4-34098881f9cc"), Description = "Opis.....", Level = 0, MaxNumberOfStudents = 0, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("48aea09b-4be3-4372-88bc-d46d78a1552b"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Capri 2 - system for managing diploma topic cards", TopicPolish = "Capri 2 - system do zarządzania kartami tematów prac dyplomowych" },
                        new { Id = new Guid("1ac41dae-a5db-4133-83a4-8e381af9f1ef"), CourseId = new Guid("a3fcb965-2e4e-4a8f-9ad4-34098881f9cc"), Description = "Celem pracy jest zaimplementowanie metod Electre 1s i Electre TRI jako aplikacji desktopowych.....", Level = 0, MaxNumberOfStudents = 0, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("2a21d8e5-575a-41d9-99ed-fbb5c06a3db9"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Implementation of chosen methods from Electre family", TopicPolish = "Implementacja wybranych metod z rodziny Electre" },
                        new { Id = new Guid("baeeea76-a307-47b7-9f7c-5ba2a0b7898d"), CourseId = new Guid("a3fcb965-2e4e-4a8f-9ad4-34098881f9cc"), Description = "Opis.....", Level = 0, MaxNumberOfStudents = 0, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("d979fc9c-94d3-419a-a4e9-014e5664b73c"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Implementation of decision support methods based on utility function (UTA, Assess)", TopicPolish = "Implementacja metod wspomagania decyzji opartych na funkcji użyteczności (UTA, Assess)" },
                        new { Id = new Guid("d121fd44-2d24-49c2-a62c-0e62ce2443a3"), CourseId = new Guid("a3fcb965-2e4e-4a8f-9ad4-34098881f9cc"), Description = "Opis.....", Level = 0, MaxNumberOfStudents = 0, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("4ae4e691-dcff-4236-94ca-c97c102bc66c"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Extension of diviz platform", TopicPolish = "Rozszerzenie platformy diviz o metody wielokryterialnego wspomagania decyzji oparte na różnych modelach preferencji" },
                        new { Id = new Guid("676a6b2c-0a85-45b9-97a3-42a324e09500"), CourseId = new Guid("a3fcb965-2e4e-4a8f-9ad4-34098881f9cc"), Description = "Opis.....", Level = 0, MaxNumberOfStudents = 0, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("9aabdabd-8d1b-4c38-a2d0-0f88dca17533"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Style transfering using a neural network", TopicPolish = "Transfer stylu przy użyciu sieci neuronowej" },
                        new { Id = new Guid("71684a41-96e3-4f61-a3ef-8e16108547f6"), CourseId = new Guid("7a3f2f4d-1eb1-43cf-8c50-9f52e3de4eb4"), Description = "Praca będzie polegać na własnoręcznym upakowaniu kolumny chromatograficznej, doborze odpowiednich warunków pomiaru w celu wyznaczenia podstawowych parametrów dla niestandardowych kolumn do HPLC.", Level = 0, MaxNumberOfStudents = 0, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("fb23704f-cec8-48fb-aa79-f3bd0e7e293b"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "No title", TopicPolish = "Wyznaczenie parametrów kolumny chromatograficznej za pomocą odwróconej chromatografii cieczowej" },
                        new { Id = new Guid("2910829d-696e-4de8-a3d5-554dc260a21d"), CourseId = new Guid("7a3f2f4d-1eb1-43cf-8c50-9f52e3de4eb4"), Description = "Brak opisu", Level = 1, MaxNumberOfStudents = 0, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("7345a41b-36aa-4ae2-b0fe-b7bb4279603b"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "No title", TopicPolish = "Analiza i projektowanie procesów wydzielania produktów otrzymywanych w procesie biokonwersji surowców odnawialnych" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ProposalId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new { Id = new Guid("d439ea51-2792-42be-8b13-1b714d00e48f"), UserId = new Guid("4ed2b207-2a1d-4bfb-8bc3-3f74ddb094ad") },
                        new { Id = new Guid("04abc5d8-0db1-46e9-9b75-aa9ef5b890b0"), UserId = new Guid("fe253e28-e788-49c0-8fbe-91f27c8db205") },
                        new { Id = new Guid("24f95fea-fb3f-4d3a-9331-c2dc2898a864"), UserId = new Guid("fce31e52-c600-445b-9226-72f01cd5c60e") },
                        new { Id = new Guid("89d41b58-aa83-49b3-ab47-4f20c87b382d"), UserId = new Guid("72ff5f39-7435-4ae9-abbc-fe52677b8834") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Course", b =>
                {
                    b.HasOne("Capri.Database.Entities.Faculty", "Faculty")
                        .WithMany("Courses")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.HasOne("Capri.Database.Entities.Institute", "Institute")
                        .WithMany("Promoters")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.HasOne("Capri.Database.Entities.Course", "Course")
                        .WithMany("Proposals")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Capri.Database.Entities.Promoter", "Promoter")
                        .WithMany("Proposals")
                        .HasForeignKey("PromoterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.HasOne("Capri.Database.Entities.Proposal")
                        .WithMany("Students")
                        .HasForeignKey("ProposalId");

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

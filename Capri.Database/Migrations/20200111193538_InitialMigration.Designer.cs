// <auto-generated />
using System;
using Capri.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capri.Database.Migrations
{
    [DbContext(typeof(CapriDbContext))]
    [Migration("20200111193538_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capri.Database.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FacultyId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Courses");

                    b.HasData(
                        new { Id = new Guid("a63222ec-8207-4eec-9bbf-87bc02553df0"), FacultyId = new Guid("a233998e-936d-4ba2-9bd0-924e5949d548"), Name = "Architektura" },
                        new { Id = new Guid("0f58d420-a4cf-4eb7-acdb-4f36e3bb923c"), FacultyId = new Guid("a233998e-936d-4ba2-9bd0-924e5949d548"), Name = "Architektura Wnętrz" },
                        new { Id = new Guid("88236a85-29b1-47d2-bf15-3490950ea2c0"), FacultyId = new Guid("5a0c079f-b7e8-40b7-97ee-6d8981401c7a"), Name = "Budownictwo" },
                        new { Id = new Guid("ed1f6389-437e-47a3-85ac-8bd940bccc04"), FacultyId = new Guid("5a0c079f-b7e8-40b7-97ee-6d8981401c7a"), Name = "Inżynieria Środowiska" },
                        new { Id = new Guid("12de4156-1f8c-472c-b661-bff04da4611a"), FacultyId = new Guid("8ebfb4c1-3000-4617-8915-8d0cd8142acf"), Name = "Inżynieria Biomedyczna" },
                        new { Id = new Guid("216689b8-18f4-4c19-a825-df3318878a4f"), FacultyId = new Guid("8ebfb4c1-3000-4617-8915-8d0cd8142acf"), Name = "Inżynieria Materiałowa" },
                        new { Id = new Guid("19dc2fb6-1784-47a2-b61d-a31293e2f09a"), FacultyId = new Guid("8ebfb4c1-3000-4617-8915-8d0cd8142acf"), Name = "Mechanika i Budowa Maszyn" },
                        new { Id = new Guid("64666500-739a-4947-89de-c458b2581ad2"), FacultyId = new Guid("8ebfb4c1-3000-4617-8915-8d0cd8142acf"), Name = "Mechatronika" },
                        new { Id = new Guid("0273535e-252b-4e01-a99a-39fcd6ae5fd0"), FacultyId = new Guid("8ebfb4c1-3000-4617-8915-8d0cd8142acf"), Name = "Zarządzanie i Inżynieria Produkcji" },
                        new { Id = new Guid("9d3c46a5-fe91-4ac6-9786-d1687ee71221"), FacultyId = new Guid("8e8b61e5-c047-4d3f-b6c5-69a478a1226c"), Name = "Elektronika i Telekomunikacja" },
                        new { Id = new Guid("832da2c4-0b8f-4037-8c3f-60ac26e2d5a7"), FacultyId = new Guid("8e8b61e5-c047-4d3f-b6c5-69a478a1226c"), Name = "Teleinformatyka" },
                        new { Id = new Guid("698df9a5-d60e-4664-949c-223296ef8f2d"), FacultyId = new Guid("7326bdb1-9743-4667-852f-dfd1082c9331"), Name = "Automatyka i Robotyka" },
                        new { Id = new Guid("600053ab-3862-4b6e-87f2-fadbd10c2e18"), FacultyId = new Guid("7326bdb1-9743-4667-852f-dfd1082c9331"), Name = "Elektrotechnika" },
                        new { Id = new Guid("7971e4b9-14ed-4271-a5ef-314e6013929b"), FacultyId = new Guid("7326bdb1-9743-4667-852f-dfd1082c9331"), Name = "Energetyka" },
                        new { Id = new Guid("6a024bc0-2cb8-4be4-b347-50b6bc17b802"), FacultyId = new Guid("7326bdb1-9743-4667-852f-dfd1082c9331"), Name = "Matematyka w Technice" },
                        new { Id = new Guid("8b1fc5f2-e08f-41a7-8072-7c22771c64e7"), FacultyId = new Guid("f8113a0e-a81c-4a42-b579-b4a8beed32dd"), Name = "Edukacja Techniczno-Informatyczna" },
                        new { Id = new Guid("c6878b77-83e9-43d3-b4fe-ecc868a53893"), FacultyId = new Guid("f8113a0e-a81c-4a42-b579-b4a8beed32dd"), Name = "Fizyka Techniczna" },
                        new { Id = new Guid("99ab87bd-e102-458d-bd19-30eca94f38e4"), FacultyId = new Guid("6ff182b8-7b49-438d-a4b1-f0830194d1d2"), Name = "Informatyka" },
                        new { Id = new Guid("0c4dc0cc-dfbb-485d-a81e-9c2f98966061"), FacultyId = new Guid("6ff182b8-7b49-438d-a4b1-f0830194d1d2"), Name = "Bioinformatyka" },
                        new { Id = new Guid("4b87b6ec-87f2-4bdc-ae4f-9a8d4521c0cf"), FacultyId = new Guid("6ff182b8-7b49-438d-a4b1-f0830194d1d2"), Name = "Sztuczna Inteligencja / Artificial Intelligence" },
                        new { Id = new Guid("62be7e1f-3130-44b2-81ad-9072ccdcf4d9"), FacultyId = new Guid("65432bd8-f65b-4505-b4ef-242f304f25bd"), Name = "Konstrukcja i Eksploatacja Środków Transportu" },
                        new { Id = new Guid("4f69cdd3-00e5-4503-af41-0abb0159b4aa"), FacultyId = new Guid("65432bd8-f65b-4505-b4ef-242f304f25bd"), Name = "Transport" },
                        new { Id = new Guid("8eaa75b5-15e9-4c6f-9ec4-8b120e601daf"), FacultyId = new Guid("65432bd8-f65b-4505-b4ef-242f304f25bd"), Name = "Lotnictwo i Kosmonautyka" },
                        new { Id = new Guid("8990b41b-dc80-4a78-bbcb-8d04ad028a0e"), FacultyId = new Guid("f60ece9b-d5c6-4a54-a58a-c87cfe480901"), Name = "Logistyka" },
                        new { Id = new Guid("8c7647ad-e836-4d12-9eaa-990e5027fe3e"), FacultyId = new Guid("f60ece9b-d5c6-4a54-a58a-c87cfe480901"), Name = "Inżynieria Zarządzania" },
                        new { Id = new Guid("654d82f7-da53-4803-abef-1ba090ce98bf"), FacultyId = new Guid("f60ece9b-d5c6-4a54-a58a-c87cfe480901"), Name = "Inżynieria Bezpieczeństwa" },
                        new { Id = new Guid("b8f1f542-68f7-406d-9519-a437b0dd42ae"), FacultyId = new Guid("924f928f-531e-4c21-8b25-ad03b24752cc"), Name = "Inżynieria Chemiczna i Procesowa" },
                        new { Id = new Guid("14d42480-0ed9-4fc2-9150-26e955560ddc"), FacultyId = new Guid("924f928f-531e-4c21-8b25-ad03b24752cc"), Name = "Technologia Chemiczna / Chemical Technology" },
                        new { Id = new Guid("f731ff93-e73c-4ae9-8f92-922257dfaaa0"), FacultyId = new Guid("924f928f-531e-4c21-8b25-ad03b24752cc"), Name = "Technologie Ochrony Środowiska" },
                        new { Id = new Guid("52a2dc07-e549-4690-857d-f14637f9a799"), FacultyId = new Guid("924f928f-531e-4c21-8b25-ad03b24752cc"), Name = "Inżynieria Farmaceutyczna" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Faculties");

                    b.HasData(
                        new { Id = new Guid("a233998e-936d-4ba2-9bd0-924e5949d548"), Name = "Wydział Architektury" },
                        new { Id = new Guid("5a0c079f-b7e8-40b7-97ee-6d8981401c7a"), Name = "Wydział Budownictwa i Inżynierii Środowiska" },
                        new { Id = new Guid("8ebfb4c1-3000-4617-8915-8d0cd8142acf"), Name = "Wydział Budowy Maszyn i Zarządzania" },
                        new { Id = new Guid("8e8b61e5-c047-4d3f-b6c5-69a478a1226c"), Name = "Wydział Elektroniki i Telekomunikacji" },
                        new { Id = new Guid("7326bdb1-9743-4667-852f-dfd1082c9331"), Name = "Wydział Elektryczny" },
                        new { Id = new Guid("f8113a0e-a81c-4a42-b579-b4a8beed32dd"), Name = "Wydział Fizyki Technicznej" },
                        new { Id = new Guid("6ff182b8-7b49-438d-a4b1-f0830194d1d2"), Name = "Wydział Informatyki" },
                        new { Id = new Guid("65432bd8-f65b-4505-b4ef-242f304f25bd"), Name = "Wydział Inżynierii Transportu" },
                        new { Id = new Guid("f60ece9b-d5c6-4a54-a58a-c87cfe480901"), Name = "Wydział Inżynierii Zarządzania" },
                        new { Id = new Guid("924f928f-531e-4c21-8b25-ad03b24752cc"), Name = "Wydział Technologii Chemicznej" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = new Guid("50e5f997-56b8-4ad6-87b2-4da3d70d0edf"), ConcurrencyStamp = "a25260af-8a67-4465-a891-8539efaa2fb3", Name = "dean", NormalizedName = "dean" },
                        new { Id = new Guid("124293db-28b4-47b8-a0cf-db82f3da2533"), ConcurrencyStamp = "8474cd5f-3f64-43a4-a939-59e6e1a7ad2a", Name = "student", NormalizedName = "student" },
                        new { Id = new Guid("6d3bd2e3-1eb7-49fb-a39a-42ffa6a7daed"), ConcurrencyStamp = "8b1096bc-7765-46d0-8309-ff0de0d8b241", Name = "promoter", NormalizedName = "promoter" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("UserId", "RoleId");

                    b.HasAlternateKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { UserId = new Guid("82dc4c56-5f0a-4a4f-be1e-1af6c2df9a5a"), RoleId = new Guid("50e5f997-56b8-4ad6-87b2-4da3d70d0edf"), Id = new Guid("64abe33e-d258-4a28-9e17-68db63ce0655") },
                        new { UserId = new Guid("091beb58-a490-4614-9661-74974030ca3d"), RoleId = new Guid("50e5f997-56b8-4ad6-87b2-4da3d70d0edf"), Id = new Guid("736c79c7-972f-4669-bcd2-8d3002f02c10") },
                        new { UserId = new Guid("5a0cd578-8571-4fb3-a77e-43a8635c1c8b"), RoleId = new Guid("50e5f997-56b8-4ad6-87b2-4da3d70d0edf"), Id = new Guid("bc90b539-7ddf-4f54-a683-4b64746f35a7") },
                        new { UserId = new Guid("8250b4c3-51ac-4a59-a561-63b786defaab"), RoleId = new Guid("50e5f997-56b8-4ad6-87b2-4da3d70d0edf"), Id = new Guid("a15fceb1-56c4-4248-95c5-38393fbc9b09") },
                        new { UserId = new Guid("6fab43e9-a7e5-4cc6-a176-196eb7465234"), RoleId = new Guid("124293db-28b4-47b8-a0cf-db82f3da2533"), Id = new Guid("0dc56b87-4288-46de-a85b-087271746445") },
                        new { UserId = new Guid("0f7eb686-1b49-4c83-99e7-0bb1dc5e3b74"), RoleId = new Guid("124293db-28b4-47b8-a0cf-db82f3da2533"), Id = new Guid("5a95c844-a705-4677-a108-cf3dcfa44d9b") },
                        new { UserId = new Guid("00a80c76-ad0d-422b-8451-3a1317f40728"), RoleId = new Guid("124293db-28b4-47b8-a0cf-db82f3da2533"), Id = new Guid("fe5a6433-305d-4d3f-b0f1-1e8f97663263") },
                        new { UserId = new Guid("f51ee1b2-937c-4f9a-8c8e-0546d82ab45d"), RoleId = new Guid("124293db-28b4-47b8-a0cf-db82f3da2533"), Id = new Guid("0ec7cd2c-8acb-43a5-ba26-02f89d9b4fe3") },
                        new { UserId = new Guid("253400a9-7b43-40cb-ac91-e54bef6f37bd"), RoleId = new Guid("6d3bd2e3-1eb7-49fb-a39a-42ffa6a7daed"), Id = new Guid("bb078ac6-5f80-4989-94e5-cbf0de2e6c09") },
                        new { UserId = new Guid("c946e27e-dccd-4d05-9b40-901148074aca"), RoleId = new Guid("6d3bd2e3-1eb7-49fb-a39a-42ffa6a7daed"), Id = new Guid("d04841fb-e412-425f-9118-774ac9c080fc") },
                        new { UserId = new Guid("aa338a3b-ae16-4f01-9b7b-53223ea7b509"), RoleId = new Guid("6d3bd2e3-1eb7-49fb-a39a-42ffa6a7daed"), Id = new Guid("a8fab158-f73f-4c39-98a1-3f6c5d113d15") },
                        new { UserId = new Guid("23522c1e-fd0a-4305-85a6-de47877b687d"), RoleId = new Guid("6d3bd2e3-1eb7-49fb-a39a-42ffa6a7daed"), Id = new Guid("b5bab061-50a5-4776-a05a-64dd3d5f6cb3") },
                        new { UserId = new Guid("75bc900a-a13e-440e-a4a3-4dc07cd705d1"), RoleId = new Guid("6d3bd2e3-1eb7-49fb-a39a-42ffa6a7daed"), Id = new Guid("3cbdbc25-5825-47c6-a404-e0d1ca18ec78") },
                        new { UserId = new Guid("f787b99a-2add-4e81-9e4f-35de3059a8f5"), RoleId = new Guid("6d3bd2e3-1eb7-49fb-a39a-42ffa6a7daed"), Id = new Guid("071ac202-3ba0-4fd0-b257-fd3836650ae5") },
                        new { UserId = new Guid("1ab49ee8-862d-4f89-8ae7-93676801f5eb"), RoleId = new Guid("6d3bd2e3-1eb7-49fb-a39a-42ffa6a7daed"), Id = new Guid("8f7fc631-8701-4136-bf6a-e6f817b09f90") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<Guid>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = new Guid("82dc4c56-5f0a-4a4f-be1e-1af6c2df9a5a"), AccessFailedCount = 0, ConcurrencyStamp = "d862c47e-b0b4-4619-988a-d651c2f0d588", Email = "dean1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN1@GMAIL.COM", NormalizedUserName = "DEAN1@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEIulDOnCwYA2VZ6hO1TOzpBj3XMGFmKHLzLOna4OJEtdVmxwlTRM8+ilsUFSH36tLg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean1@gmail.com" },
                        new { Id = new Guid("091beb58-a490-4614-9661-74974030ca3d"), AccessFailedCount = 0, ConcurrencyStamp = "adf3516d-f442-4ee8-8002-42222564dffb", Email = "dean2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN2@GMAIL.COM", NormalizedUserName = "DEAN2@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEL9t9u//3vwIMJ0SfAhqH9tRuxu0UpfEWswJM1keCHR0FOOJfqEmCGdgrZoBwVLY9Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean2@gmail.com" },
                        new { Id = new Guid("5a0cd578-8571-4fb3-a77e-43a8635c1c8b"), AccessFailedCount = 0, ConcurrencyStamp = "6b9a60a2-04d0-4dc5-9e99-0e502ae5e574", Email = "dean3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN3@GMAIL.COM", NormalizedUserName = "DEAN3@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEGgzk769CpS1cZr+cJiF3JU/4gpCoQDQ4IJq6hzu/lYgIZklcO79lFx6BM4qwnBxNg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean3@gmail.com" },
                        new { Id = new Guid("8250b4c3-51ac-4a59-a561-63b786defaab"), AccessFailedCount = 0, ConcurrencyStamp = "5c9f34ea-6cee-42e4-b69c-7eb4691c2d94", Email = "dean4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN4@GMAIL.COM", NormalizedUserName = "DEAN4@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEF/QSvwbQX5sl1mBDgz4StAUVVRc5PJZ6C1RmCPzOagh3NLA+Jn3Ds+tvnvoXzCjjQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean4@gmail.com" },
                        new { Id = new Guid("6fab43e9-a7e5-4cc6-a176-196eb7465234"), AccessFailedCount = 0, ConcurrencyStamp = "2719a717-fa4b-4a11-b39e-a3a93d153094", Email = "student1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT1@GMAIL.COM", NormalizedUserName = "STUDENT1@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEN20yt3ybbow0ObglcEaSemyOgHaEQpAGULYbnjBTyDI9ew+lSqOwhU4qmGj94ZmWA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student1@gmail.com" },
                        new { Id = new Guid("0f7eb686-1b49-4c83-99e7-0bb1dc5e3b74"), AccessFailedCount = 0, ConcurrencyStamp = "e1fa5d0a-2437-4a4c-9aa2-c738a68d2f28", Email = "student2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT2@GMAIL.COM", NormalizedUserName = "STUDENT2@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEOWvTKaU2buMPk51gpEahWYTdFIcKlZPny1pC9atLGgB9FZSTFtE9TZDBCrMEJtS2Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student2@gmail.com" },
                        new { Id = new Guid("00a80c76-ad0d-422b-8451-3a1317f40728"), AccessFailedCount = 0, ConcurrencyStamp = "4708ae04-a86f-4dce-a090-081c73f183b4", Email = "student3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT3@GMAIL.COM", NormalizedUserName = "STUDENT3@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEH8KnAp/VgFETRtKEFrnyMZWMs3pZnkkrMmQRke9xHZlwpgGrMaFt8rNjgrowQ5L8w==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student3@gmail.com" },
                        new { Id = new Guid("f51ee1b2-937c-4f9a-8c8e-0546d82ab45d"), AccessFailedCount = 0, ConcurrencyStamp = "3cc2cc2c-5e21-4c94-aa0e-0e64ab7d7a51", Email = "student4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT4@GMAIL.COM", NormalizedUserName = "STUDENT4@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAELWpT0f8KAFpVrU5KBR+Q1aepFN9xGFXrg1LW45UZmTFO3vjXHk7xOD8Ev5iRcVDNQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student4@gmail.com" },
                        new { Id = new Guid("253400a9-7b43-40cb-ac91-e54bef6f37bd"), AccessFailedCount = 0, ConcurrencyStamp = "3878538f-5bc5-43c6-a449-776f2e4a029d", Email = "irmina.maslowska@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "IRMINA.MASLOWSKA@PUT.POZNAN.PL", NormalizedUserName = "IRMINA.MASLOWSKA@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAED0mMesjv9d42QE/PReAKmSlQ0EYfZyRAmVoxGHP43z98TmYsa7x1XJ2s7TC84nIyA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "irmina.maslowska@put.poznan.pl" },
                        new { Id = new Guid("c946e27e-dccd-4d05-9b40-901148074aca"), AccessFailedCount = 0, ConcurrencyStamp = "b911238a-43e6-419e-bff6-1382ca50fba1", Email = "bartlomiej.predki@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "BARTLOMIEJ.PREDKI@PUT.POZNAN.PL", NormalizedUserName = "BARTLOMIEJ.PREDKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEPBLxqEFZRkjwh5cJmincUY0v1kH0i1QejlVxkgZXmdv+cwo15xPCMgKe7g5u8FdcA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "bartlomiej.predki@put.poznan.pl" },
                        new { Id = new Guid("aa338a3b-ae16-4f01-9b7b-53223ea7b509"), AccessFailedCount = 0, ConcurrencyStamp = "3c6f779c-926a-41d3-bd5a-c30b46c86ca4", Email = "milosz.kadzinski@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "MILOSZ.KADZINSKI@PUT.POZNAN.PL", NormalizedUserName = "MILOSZ.KADZINSKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEPcQktEL3mlRQberqCfdrXYMRqC2p+NKxikeeku92A5LVU+r6K1dJ5J/3mwPLjHMjA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "milosz.kadzinski@put.poznan.pl" },
                        new { Id = new Guid("23522c1e-fd0a-4305-85a6-de47877b687d"), AccessFailedCount = 0, ConcurrencyStamp = "075c691b-f571-474f-ac0f-c5121087684c", Email = "wojciech.kotlowski@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "WOJCIECH.KOTLOWSKI@PUT.POZNAN.PL", NormalizedUserName = "WOJCIECH.KOTLOWSKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEDzvQn75OZ/kA8nNMPL5H18bqsD8IXzk5fBLELjMMo8vAuoKzJqhD/2K+AHLh8QyiA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "wojciech.kotlowski@put.poznan.pl" },
                        new { Id = new Guid("75bc900a-a13e-440e-a4a3-4dc07cd705d1"), AccessFailedCount = 0, ConcurrencyStamp = "1a3aeb7f-8d3b-4845-9a92-9bd410fc7a42", Email = "jerzy.nawrocki@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "JERZY.NAWROCKI@PUT.POZNAN.PL", NormalizedUserName = "JERZY.NAWROCKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEObTNXOhXGKZp9tTBsQ8UDSIm03bTbpb/+qLGJYyl7CWNBTnzbRZG5k4s9LdyT6+Ig==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "jerzy.nawrocki@put.poznan.pl" },
                        new { Id = new Guid("f787b99a-2add-4e81-9e4f-35de3059a8f5"), AccessFailedCount = 0, ConcurrencyStamp = "9dec05f3-3da1-4c02-b610-c1c8f95e6600", Email = "katarzyna.adamska@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "KATARZYNA.ADAMSKA@PUT.POZNAN.PL", NormalizedUserName = "KATARZYNA.ADAMSKA@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEJWwoJHv6xU0D1BZ4zcUBfGEsK+qO0eBjcCS+G13zdu2YkudbJnWUTFUvH7lhPakUA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "katarzyna.adamska@put.poznan.pl" },
                        new { Id = new Guid("1ab49ee8-862d-4f89-8ae7-93676801f5eb"), AccessFailedCount = 0, ConcurrencyStamp = "afc7ac23-e2eb-43eb-9d4f-0dc08c8ca856", Email = "krzysztof.alejski@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "KRZYSZTOF.ALEJSKI@PUT.POZNAN.PL", NormalizedUserName = "KRZYSZTOF.ALEJSKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAECk6MYw68Ehzku+1R4Ww3ASv6a53GKclyieYLXdj13OVLdTt9GqsGVwe9AGYtbUIJQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "krzysztof.alejski@put.poznan.pl" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Institute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Institutes");

                    b.HasData(
                        new { Id = new Guid("25ff6c03-0edb-4986-aabf-23b385009edc"), Name = "Instytut Informatyki" },
                        new { Id = new Guid("ed157155-a3d9-47a4-8b55-6c8504ea1b69"), Name = "Instytut Technologii Mechanicznej" },
                        new { Id = new Guid("7a84b12b-0f48-4dc6-9c96-a2aa0992e4ea"), Name = "Instytut Matematyki" },
                        new { Id = new Guid("9809b36f-05d0-4361-ad19-b77a3b717ed5"), Name = "Instytut Technologii Materiałów" },
                        new { Id = new Guid("e2b9da8c-dbdf-404c-bcce-8fadc7efeccb"), Name = "Instytut Inżynierii Lądowej" },
                        new { Id = new Guid("d79adb54-a737-437f-beb6-a87993570b57"), Name = "Instytut Inżynierii Środowiska" },
                        new { Id = new Guid("23cf2dcc-9051-4930-b51a-82312c332a7e"), Name = "Instytut Chemii i Elektrochemii Technicznej" },
                        new { Id = new Guid("5f5a9130-c88a-4071-a5d8-36f1ad4a36a0"), Name = "Instytut Elektrotechniki i Elektroniki Przemysłowej" },
                        new { Id = new Guid("43edf3c8-ec55-4ff3-a877-f6ac27dba068"), Name = "Instytut Mechaniki Stosowanej" },
                        new { Id = new Guid("c97f6cd4-0b72-4beb-ac2e-b49eb16a8af3"), Name = "Instytut Technologii i Inżynierii Chemicznej" },
                        new { Id = new Guid("ca7fa4f5-56be-4370-ab1f-070fda034593"), Name = "Instytut Architektury i Planowania Przestrzennego" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExpectedNumberOfBachelorProposals");

                    b.Property<int>("ExpectedNumberOfMasterProposals");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<Guid>("InstituteId");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("TitlePostfix");

                    b.Property<string>("TitlePrefix")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.HasIndex("UserId");

                    b.ToTable("Promoters");

                    b.HasData(
                        new { Id = new Guid("2a21d8e5-575a-41d9-99ed-fbb5c06a3db9"), ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Irmina", InstituteId = new Guid("25ff6c03-0edb-4986-aabf-23b385009edc"), LastName = "Masłowska", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = new Guid("253400a9-7b43-40cb-ac91-e54bef6f37bd") },
                        new { Id = new Guid("d979fc9c-94d3-419a-a4e9-014e5664b73c"), ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Bartłomiej", InstituteId = new Guid("25ff6c03-0edb-4986-aabf-23b385009edc"), LastName = "Prędki", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = new Guid("c946e27e-dccd-4d05-9b40-901148074aca") },
                        new { Id = new Guid("4ae4e691-dcff-4236-94ca-c97c102bc66c"), ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Miłosz", InstituteId = new Guid("25ff6c03-0edb-4986-aabf-23b385009edc"), LastName = "Kadziński", TitlePostfix = "", TitlePrefix = "dr hab. inż.", UserId = new Guid("aa338a3b-ae16-4f01-9b7b-53223ea7b509") },
                        new { Id = new Guid("9aabdabd-8d1b-4c38-a2d0-0f88dca17533"), ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Wojciech", InstituteId = new Guid("25ff6c03-0edb-4986-aabf-23b385009edc"), LastName = "Kotłowski", TitlePostfix = "", TitlePrefix = "dr hab. inż.", UserId = new Guid("23522c1e-fd0a-4305-85a6-de47877b687d") },
                        new { Id = new Guid("48aea09b-4be3-4372-88bc-d46d78a1552b"), ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Jerzy", InstituteId = new Guid("25ff6c03-0edb-4986-aabf-23b385009edc"), LastName = "Nawrocki", TitlePostfix = "prof. PP", TitlePrefix = "dr hab inż.", UserId = new Guid("75bc900a-a13e-440e-a4a3-4dc07cd705d1") },
                        new { Id = new Guid("fb23704f-cec8-48fb-aa79-f3bd0e7e293b"), ExpectedNumberOfBachelorProposals = 1, ExpectedNumberOfMasterProposals = 1, FirstName = "Katarzyna", InstituteId = new Guid("c97f6cd4-0b72-4beb-ac2e-b49eb16a8af3"), LastName = "Adamska", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = new Guid("f787b99a-2add-4e81-9e4f-35de3059a8f5") },
                        new { Id = new Guid("7345a41b-36aa-4ae2-b0fe-b7bb4279603b"), ExpectedNumberOfBachelorProposals = 3, ExpectedNumberOfMasterProposals = 2, FirstName = "Krzysztof", InstituteId = new Guid("c97f6cd4-0b72-4beb-ac2e-b49eb16a8af3"), LastName = "Alejski", TitlePostfix = "prof. PP", TitlePrefix = "dr hab. inż.", UserId = new Guid("1ab49ee8-862d-4f89-8ae7-93676801f5eb") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Level");

                    b.Property<int>("MaxNumberOfStudents");

                    b.Property<int>("Mode");

                    b.Property<string>("OutputData");

                    b.Property<Guid>("PromoterId");

                    b.Property<string>("Specialization");

                    b.Property<DateTime>("StartingDate");

                    b.Property<int>("Status");

                    b.Property<int>("StudyProfile");

                    b.Property<string>("TopicEnglish")
                        .IsRequired();

                    b.Property<string>("TopicPolish")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PromoterId");

                    b.ToTable("Proposals");

                    b.HasData(
                        new { Id = new Guid("c4bbdd08-2f79-40e6-a9b4-d11d1f9f4dd6"), CourseId = new Guid("99ab87bd-e102-458d-bd19-30eca94f38e4"), Description = "Opis.....", Level = 0, MaxNumberOfStudents = 4, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("48aea09b-4be3-4372-88bc-d46d78a1552b"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Capri 2 - system for managing diploma topic cards", TopicPolish = "Capri 2 - system do zarządzania kartami tematów prac dyplomowych" },
                        new { Id = new Guid("4e57c141-416a-41c7-a369-bf9390e33314"), CourseId = new Guid("99ab87bd-e102-458d-bd19-30eca94f38e4"), Description = "Celem pracy jest zaimplementowanie metod Electre 1s i Electre TRI jako aplikacji desktopowych.....", Level = 0, MaxNumberOfStudents = 4, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("2a21d8e5-575a-41d9-99ed-fbb5c06a3db9"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Implementation of chosen methods from Electre family", TopicPolish = "Implementacja wybranych metod z rodziny Electre" },
                        new { Id = new Guid("97916d4d-24d6-48ac-88c1-0e345c95e812"), CourseId = new Guid("99ab87bd-e102-458d-bd19-30eca94f38e4"), Description = "Opis.....", Level = 0, MaxNumberOfStudents = 4, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("d979fc9c-94d3-419a-a4e9-014e5664b73c"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Implementation of decision support methods based on utility function (UTA, Assess)", TopicPolish = "Implementacja metod wspomagania decyzji opartych na funkcji użyteczności (UTA, Assess)" },
                        new { Id = new Guid("c7d423e5-0574-460f-805d-d6a7c5a35d46"), CourseId = new Guid("99ab87bd-e102-458d-bd19-30eca94f38e4"), Description = "Opis.....", Level = 0, MaxNumberOfStudents = 4, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("4ae4e691-dcff-4236-94ca-c97c102bc66c"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Extension of diviz platform", TopicPolish = "Rozszerzenie platformy diviz o metody wielokryterialnego wspomagania decyzji oparte na różnych modelach preferencji" },
                        new { Id = new Guid("cb9bcf3f-17df-4427-8bb6-8a481a782bd8"), CourseId = new Guid("99ab87bd-e102-458d-bd19-30eca94f38e4"), Description = "Opis.....", Level = 0, MaxNumberOfStudents = 4, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("9aabdabd-8d1b-4c38-a2d0-0f88dca17533"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Style transfering using a neural network", TopicPolish = "Transfer stylu przy użyciu sieci neuronowej" },
                        new { Id = new Guid("7d341b9c-0f4e-4a1c-b20e-4f5f7330dfe1"), CourseId = new Guid("b8f1f542-68f7-406d-9519-a437b0dd42ae"), Description = "Praca będzie polegać na własnoręcznym upakowaniu kolumny chromatograficznej, doborze odpowiednich warunków pomiaru w celu wyznaczenia podstawowych parametrów dla niestandardowych kolumn do HPLC.", Level = 0, MaxNumberOfStudents = 4, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("fb23704f-cec8-48fb-aa79-f3bd0e7e293b"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "No title", TopicPolish = "Wyznaczenie parametrów kolumny chromatograficznej za pomocą odwróconej chromatografii cieczowej" },
                        new { Id = new Guid("4125feb8-ac09-4fef-a924-b030f28e3bbc"), CourseId = new Guid("b8f1f542-68f7-406d-9519-a437b0dd42ae"), Description = "Brak opisu", Level = 1, MaxNumberOfStudents = 4, Mode = 0, OutputData = "Brak danych", PromoterId = new Guid("7345a41b-36aa-4ae2-b0fe-b7bb4279603b"), Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "No title", TopicPolish = "Analiza i projektowanie procesów wydzielania produktów otrzymywanych w procesie biokonwersji surowców odnawialnych" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ProposalId");

                    b.Property<int>("Semester");

                    b.Property<int>("StudyLevel");

                    b.Property<int>("StudyMode");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new { Id = new Guid("d912639c-efa3-494e-90ac-5f2ce1ad88b3"), Semester = 6, StudyLevel = 0, StudyMode = 0, UserId = new Guid("6fab43e9-a7e5-4cc6-a176-196eb7465234") },
                        new { Id = new Guid("fac40401-386d-40ff-893f-64ead862776b"), Semester = 6, StudyLevel = 0, StudyMode = 0, UserId = new Guid("0f7eb686-1b49-4c83-99e7-0bb1dc5e3b74") },
                        new { Id = new Guid("136629f6-42c7-4a85-80d3-8238e35a33d6"), Semester = 6, StudyLevel = 0, StudyMode = 0, UserId = new Guid("00a80c76-ad0d-422b-8451-3a1317f40728") },
                        new { Id = new Guid("912ba719-04f3-4862-8b33-b648f196cb31"), Semester = 6, StudyLevel = 0, StudyMode = 0, UserId = new Guid("f51ee1b2-937c-4f9a-8c8e-0546d82ab45d") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Course", b =>
                {
                    b.HasOne("Capri.Database.Entities.Faculty", "Faculty")
                        .WithMany("Courses")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.HasOne("Capri.Database.Entities.Institute", "Institute")
                        .WithMany("Promoters")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.HasOne("Capri.Database.Entities.Course", "Course")
                        .WithMany("Proposals")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Capri.Database.Entities.Promoter", "Promoter")
                        .WithMany("Proposals")
                        .HasForeignKey("PromoterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.HasOne("Capri.Database.Entities.Proposal", "Proposal")
                        .WithMany("Students")
                        .HasForeignKey("ProposalId");

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

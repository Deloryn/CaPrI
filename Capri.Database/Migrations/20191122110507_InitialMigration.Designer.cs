// <auto-generated />
using System;
using Capri.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capri.Database.Migrations
{
    [DbContext(typeof(CapriDbContext))]
    [Migration("20191122110507_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = new Guid("5454fd40-c2d9-4273-aac4-b8467a96ca01"), ConcurrencyStamp = "c54b8fff-2fa1-4e83-99a6-e44b53806f78", Name = "admin", NormalizedName = "admin" },
                        new { Id = new Guid("53066f92-374d-461a-9aac-cf0ae4bd12ae"), ConcurrencyStamp = "47f7684c-1fb5-43b3-aeae-ac40b006fde2", Name = "dean", NormalizedName = "dean" },
                        new { Id = new Guid("f8b25702-b933-49ec-ad34-57b318e15279"), ConcurrencyStamp = "3f5f9c3b-a541-4925-87a0-23ba8f0506c5", Name = "student", NormalizedName = "student" },
                        new { Id = new Guid("eae672e4-7dcb-44b5-9412-567b6529b5b6"), ConcurrencyStamp = "1032cf27-5319-4abe-955f-c1da01c5fa1d", Name = "promoter", NormalizedName = "promoter" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { Id = new Guid("0c037d71-83aa-4cdf-af2d-3a5e5aa9ef93"), RoleId = new Guid("5454fd40-c2d9-4273-aac4-b8467a96ca01"), UserId = new Guid("519d2687-d78a-49f5-b884-d6ce2cb10c0f") },
                        new { Id = new Guid("f1bef887-26d4-4468-92dd-c53b35d6e5cd"), RoleId = new Guid("53066f92-374d-461a-9aac-cf0ae4bd12ae"), UserId = new Guid("b01947d7-8277-48e2-bddb-c59645e26f4d") },
                        new { Id = new Guid("21e64f35-bc25-4bab-aa07-c58370228a06"), RoleId = new Guid("53066f92-374d-461a-9aac-cf0ae4bd12ae"), UserId = new Guid("4de7df58-b74c-459f-87fd-586ef556d41d") },
                        new { Id = new Guid("c9b12104-a892-45f8-b3fb-9fdb9e634c01"), RoleId = new Guid("f8b25702-b933-49ec-ad34-57b318e15279"), UserId = new Guid("7ea8b2d5-5c9e-4be1-b270-f369ce231acd") },
                        new { Id = new Guid("d8376854-4d09-4566-a673-9cbcdbc6475c"), RoleId = new Guid("f8b25702-b933-49ec-ad34-57b318e15279"), UserId = new Guid("bc1d5c2b-139c-475f-b887-33a5bf13500a") },
                        new { Id = new Guid("f1077c0e-12f4-4e14-97ff-7f37d783201c"), RoleId = new Guid("f8b25702-b933-49ec-ad34-57b318e15279"), UserId = new Guid("6433f142-9cdf-42c3-8ce6-04cd021f6c71") },
                        new { Id = new Guid("063ef35b-abcc-4929-a6ad-c7cb9bf45e78"), RoleId = new Guid("f8b25702-b933-49ec-ad34-57b318e15279"), UserId = new Guid("b6b2385c-d80f-4e62-bbfb-fb7a50a40d84") },
                        new { Id = new Guid("0ea7de61-dc94-4276-8526-16ceb3e92b70"), RoleId = new Guid("f8b25702-b933-49ec-ad34-57b318e15279"), UserId = new Guid("314a14fb-1bcd-4ef1-affd-77b33f650d8a") },
                        new { Id = new Guid("6c4ea15f-004d-49e5-98a9-9631d54de42f"), RoleId = new Guid("f8b25702-b933-49ec-ad34-57b318e15279"), UserId = new Guid("a87085c0-afc1-4f4b-94f8-6b564140ac6d") },
                        new { Id = new Guid("af201a76-1440-449c-9a5e-9396e5f59143"), RoleId = new Guid("f8b25702-b933-49ec-ad34-57b318e15279"), UserId = new Guid("81503dfe-3973-4df8-89e5-3554aa16f3b2") },
                        new { Id = new Guid("25b5116b-5ddd-48c3-b6c6-7afce3a2960d"), RoleId = new Guid("f8b25702-b933-49ec-ad34-57b318e15279"), UserId = new Guid("62246e4a-671d-4988-bb80-b22e3c5e14f5") },
                        new { Id = new Guid("94a15b69-36fa-491e-b23b-831f588fdd4f"), RoleId = new Guid("eae672e4-7dcb-44b5-9412-567b6529b5b6"), UserId = new Guid("1dfc42f6-d3cd-4b35-8681-eead25df0aea") },
                        new { Id = new Guid("4df6477a-55e9-43cf-b9ec-b2c6c03e7a83"), RoleId = new Guid("eae672e4-7dcb-44b5-9412-567b6529b5b6"), UserId = new Guid("4f2f1b37-4fcc-474e-b4a3-edff69668a80") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.GuidUserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<Guid>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = new Guid("519d2687-d78a-49f5-b884-d6ce2cb10c0f"), AccessFailedCount = 0, ConcurrencyStamp = "8997e222-15bb-4398-aa79-140206d96fbc", Email = "admin1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "admin1@gmail.com", NormalizedUserName = "admin1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEPPf7/YOxW+gVoXB6KFUhbjcgHCwTLeQoux4LR0cO7JDdVp2YV/onGkY77fa+AdOrg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "admin1@gmail.com" },
                        new { Id = new Guid("b01947d7-8277-48e2-bddb-c59645e26f4d"), AccessFailedCount = 0, ConcurrencyStamp = "062b20cc-5ef5-470c-9ae8-fda77f85e9e7", Email = "dean1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean1@gmail.com", NormalizedUserName = "dean1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEOaWzOGyIfv0OZeIv2POZgG+gxfD7Pr80hjXRg9iG1cuFKbjHWeG0Sw/ojElTCVOCA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean1@gmail.com" },
                        new { Id = new Guid("4de7df58-b74c-459f-87fd-586ef556d41d"), AccessFailedCount = 0, ConcurrencyStamp = "087023e2-749b-4d52-8507-a929b31bafc4", Email = "dean2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "dean2@gmail.com", NormalizedUserName = "dean2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEJ+Z/CLSSzimgqzYis/kOsnA1NZbRc6/TMqDC/++oVqhYIxBZ3jEtSxPEAF6i7JgTw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean2@gmail.com" },
                        new { Id = new Guid("7ea8b2d5-5c9e-4be1-b270-f369ce231acd"), AccessFailedCount = 0, ConcurrencyStamp = "94a93e0d-2876-4d68-a9df-e89949b2f69b", Email = "student1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student1@gmail.com", NormalizedUserName = "student1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEJwaRpZwzUVJ7NNUq7N3rwTekprHfwNg2l77PJZW8VCmsMmxbumjXRJYtdRlF/psDw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student1@gmail.com" },
                        new { Id = new Guid("bc1d5c2b-139c-475f-b887-33a5bf13500a"), AccessFailedCount = 0, ConcurrencyStamp = "6d9cda31-f0bc-4d5e-bd55-f5d347cf5665", Email = "student2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student2@gmail.com", NormalizedUserName = "student2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEMfTaSALFZOzr04oHB90THJTO5K/os3XBMUA5gdWb/qABCnz4oBtJ3ndAkm1jxjVGQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student2@gmail.com" },
                        new { Id = new Guid("6433f142-9cdf-42c3-8ce6-04cd021f6c71"), AccessFailedCount = 0, ConcurrencyStamp = "e276748f-e9de-462d-9970-ea787ea99d9c", Email = "student3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student3@gmail.com", NormalizedUserName = "student3@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEJb9vyAJmsO8pdXZfGcsqSE/C48EtBPij/4I5M23PFbdMNsj5syJZBgIDyRuCLp6fg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student3@gmail.com" },
                        new { Id = new Guid("b6b2385c-d80f-4e62-bbfb-fb7a50a40d84"), AccessFailedCount = 0, ConcurrencyStamp = "071af231-426f-44fb-9e8b-bb6af42f166b", Email = "student4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student4@gmail.com", NormalizedUserName = "student4@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEH2gEA6xZ/YP/Jci0p1KjabLQ0tKLdDun87Y3GYBQh+7LXaxQbiD0jhVIG0LzYCiBA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student4@gmail.com" },
                        new { Id = new Guid("314a14fb-1bcd-4ef1-affd-77b33f650d8a"), AccessFailedCount = 0, ConcurrencyStamp = "d27f1a8f-c1be-4eb3-859b-194f7d8c1860", Email = "student5@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student5@gmail.com", NormalizedUserName = "student5@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEPBTGRvDydUywx/XLtcqr0MdU/Os9+7/pFPX07L9Dv3mgw21WvRXObcwjRwEvrJOeg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student5@gmail.com" },
                        new { Id = new Guid("a87085c0-afc1-4f4b-94f8-6b564140ac6d"), AccessFailedCount = 0, ConcurrencyStamp = "6125011e-830a-4927-94a3-376e589bdb62", Email = "student6@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student6@gmail.com", NormalizedUserName = "student6@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEOLGgTpVFzjF5NNMQhonsjiIJP+ZXsPOiaqafdi+zRFdOm9wHdnRy0amq5iLKQTN4A==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student6@gmail.com" },
                        new { Id = new Guid("81503dfe-3973-4df8-89e5-3554aa16f3b2"), AccessFailedCount = 0, ConcurrencyStamp = "432e53fc-e969-4c37-ac33-413e1c67227a", Email = "student7@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student7@gmail.com", NormalizedUserName = "student7@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEKxN8iGsHSPFHOLfoTs6lXgDRQIOowRMDe4wd75h50v2GfjtOyeq+vGZOp3I+zHWCg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student7@gmail.com" },
                        new { Id = new Guid("62246e4a-671d-4988-bb80-b22e3c5e14f5"), AccessFailedCount = 0, ConcurrencyStamp = "decdbf64-6553-4371-9e09-6b7dabdeb1c1", Email = "student8@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "student8@gmail.com", NormalizedUserName = "student8@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEHGCIodgCu9oaq01x9mOhJh4y6OveA8GlSVt0GXrYhzBTuv1qSlc3uJSsBLGcnioyw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student8@gmail.com" },
                        new { Id = new Guid("1dfc42f6-d3cd-4b35-8681-eead25df0aea"), AccessFailedCount = 0, ConcurrencyStamp = "713bbf1e-83c7-4ff5-a31e-aea69923e614", Email = "promoter1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter1@gmail.com", NormalizedUserName = "promoter1@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEJTPje5DuIIkiSvyHXH+8SyNdhV6mcgdEbhD+XIhinloFBU4QOz33TD6yo8t6NHeig==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter1@gmail.com" },
                        new { Id = new Guid("4f2f1b37-4fcc-474e-b4a3-edff69668a80"), AccessFailedCount = 0, ConcurrencyStamp = "fbe0e63c-bda9-4500-8dec-294024799c89", Email = "promoter2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "promoter2@gmail.com", NormalizedUserName = "promoter2@gmail.com", PasswordHash = "AQAAAAEAACcQAAAAEDKKucobQPCvinKXnFilIYSyqpFFMIYMjeYfnDUd2zq9yUWXqtwhTE7skooqBnCrOQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter2@gmail.com" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanSubmitBachelorProposals");

                    b.Property<bool>("CanSubmitMasterProposals");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Promoters");

                    b.HasData(
                        new { Id = new Guid("e830fa61-0860-4e48-bbe6-01f37017520e"), CanSubmitBachelorProposals = true, CanSubmitMasterProposals = true, FirstName = "Jan", LastName = "Kowalski", Title = "Phd.", UserId = new Guid("1dfc42f6-d3cd-4b35-8681-eead25df0aea") },
                        new { Id = new Guid("b9135b5f-e507-4abc-95c5-81f4516a06d0"), CanSubmitBachelorProposals = true, CanSubmitMasterProposals = true, FirstName = "Jan", LastName = "Kowalski", Title = "Phd.", UserId = new Guid("4f2f1b37-4fcc-474e-b4a3-edff69668a80") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Level");

                    b.Property<int>("Mode");

                    b.Property<Guid?>("PromoterId");

                    b.Property<Guid?>("PromoterId1");

                    b.Property<int>("Status");

                    b.Property<string>("Topic")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PromoterId");

                    b.HasIndex("PromoterId1");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ProposalId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new { Id = new Guid("1f822a62-87d7-4f2a-af17-7a5ae2aa96a3"), UserId = new Guid("7ea8b2d5-5c9e-4be1-b270-f369ce231acd") },
                        new { Id = new Guid("bac4f6d9-970f-48f8-89e8-741d1968f047"), UserId = new Guid("bc1d5c2b-139c-475f-b887-33a5bf13500a") },
                        new { Id = new Guid("338dc616-b551-431a-9763-ff9cef533be0"), UserId = new Guid("6433f142-9cdf-42c3-8ce6-04cd021f6c71") },
                        new { Id = new Guid("2394bd4d-c8da-47e2-b60b-32851aa97e7e"), UserId = new Guid("b6b2385c-d80f-4e62-bbfb-fb7a50a40d84") },
                        new { Id = new Guid("66de4632-1e8c-41ee-97a0-2f8854f21d8e"), UserId = new Guid("314a14fb-1bcd-4ef1-affd-77b33f650d8a") },
                        new { Id = new Guid("c18e3ca7-3a00-4294-8b9f-f64c852ba194"), UserId = new Guid("a87085c0-afc1-4f4b-94f8-6b564140ac6d") },
                        new { Id = new Guid("d17fc388-28d0-471d-aab1-0c077aa53543"), UserId = new Guid("81503dfe-3973-4df8-89e5-3554aa16f3b2") },
                        new { Id = new Guid("7b51dcfd-87f6-49ed-8edb-816d4e57daa5"), UserId = new Guid("62246e4a-671d-4988-bb80-b22e3c5e14f5") }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.HasOne("Capri.Database.Entities.Promoter")
                        .WithMany("Proposals")
                        .HasForeignKey("PromoterId");

                    b.HasOne("Capri.Database.Entities.Promoter", "Promoter")
                        .WithMany()
                        .HasForeignKey("PromoterId1");
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.HasOne("Capri.Database.Entities.Proposal")
                        .WithMany("Students")
                        .HasForeignKey("ProposalId");

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
